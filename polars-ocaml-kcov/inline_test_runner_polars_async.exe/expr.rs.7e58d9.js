var data = {lines:[
{"lineNum":"    1","line":"use chrono::{NaiveDate, NaiveDateTime};"},
{"lineNum":"    2","line":"use ocaml_interop::{"},
{"lineNum":"    3","line":"    DynBox, OCaml, OCamlBytes, OCamlFloat, OCamlInt, OCamlList, OCamlRef, OCamlRuntime, ToOCaml,"},
{"lineNum":"    4","line":"};"},
{"lineNum":"    5","line":"use polars::lazy::dsl::GetOutput;"},
{"lineNum":"    6","line":"use polars::prelude::*;"},
{"lineNum":"    7","line":"use polars::series::IsSorted;"},
{"lineNum":"    8","line":"use polars_ocaml_macros::ocaml_interop_export;"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"use crate::utils::PolarsDataType;"},
{"lineNum":"   11","line":"use crate::utils::*;"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"macro_rules! expr_op {"},
{"lineNum":"   14","line":"    ($name:ident, |$($var:ident),+| $body:expr) => {"},
{"lineNum":"   15","line":"        dyn_box_op!($name, Expr, |$($var),+| $body);"},
{"lineNum":"   16","line":"    }"},
{"lineNum":"   17","line":"}"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"fn expr_series_map<\'a>(","class":"lineNoCov","hits":"0","possible_hits":"48",},
{"lineNum":"   20","line":"    cr: &\'a mut &\'a mut OCamlRuntime,"},
{"lineNum":"   21","line":"    expr: OCamlRef<\'a, DynBox<Expr>>,"},
{"lineNum":"   22","line":"    f: impl Fn(Series) -> Result<Option<Series>, PolarsError>"},
{"lineNum":"   23","line":"        + std::marker::Sync"},
{"lineNum":"   24","line":"        + std::marker::Send"},
{"lineNum":"   25","line":"        + \'static,"},
{"lineNum":"   26","line":"    output_type: GetOutput,"},
{"lineNum":"   27","line":") -> OCaml<\'a, DynBox<Expr>> {"},
{"lineNum":"   28","line":"    let Abstract(expr) = expr.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"   29","line":"    OCaml::box_value(cr, expr.map(f, output_type))","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"   30","line":"}","class":"lineNoCov","hits":"0","possible_hits":"96",},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   33","line":"fn rust_expr_col(cr: &mut &mut OCamlRuntime, name: OCamlRef<String>) -> OCaml<DynBox<Expr>> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"    let name: String = name.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   35","line":"    OCaml::box_value(cr, col(&name))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   36","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   39","line":"fn rust_expr_cols("},
{"lineNum":"   40","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"   41","line":"    names: OCamlRef<OCamlList<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"   43","line":"    let names: Vec<String> = names.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"    OCaml::box_value(cr, cols(names))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":"}"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   48","line":"fn rust_expr_all(cr: &mut &mut OCamlRuntime, unit: OCamlRef<()>) -> OCaml<DynBox<Expr>> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":"    let _: () = unit.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":"    OCaml::box_value(cr, all())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   51","line":"}"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"   54","line":"fn rust_expr_exclude("},
{"lineNum":"   55","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"    names: OCamlRef<OCamlList<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"   59","line":"    let names: Vec<String> = names.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"    dyn_box!(cr, |expr| expr.exclude(names))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   61","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   64","line":"fn rust_expr_null(cr: &mut &mut OCamlRuntime, unit: OCamlRef<()>) -> OCaml<DynBox<Expr>> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"    let (): () = unit.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"    OCaml::box_value(cr, lit(NULL))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"}"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"   70","line":"fn rust_expr_lit("},
{"lineNum":"   71","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"    data_type: OCamlRef<GADTDataType>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":"    value: OCamlRef<DummyBoxRoot>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"   75","line":"    let data_type: GADTDataType = data_type.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"    let value: DummyBoxRoot = value.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    macro_rules! expr_lit_int {"},
{"lineNum":"   79","line":"        ($rust_type:ty) => {{"},
{"lineNum":"   80","line":"            let value = value.interpret::<OCamlInt>(cr).to_rust::<i64>();"},
{"lineNum":"   81","line":"            let value = TryInto::<$rust_type>::try_into(value).map_err(|err| err.to_string())?;","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"   82","line":"            lit(value)"},
{"lineNum":"   83","line":"        }};"},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    let lit = match data_type {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"        GADTDataType::Boolean => lit(value.interpret::<bool>(cr).to_rust::<bool>()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   88","line":"        GADTDataType::UInt8 => expr_lit_int!(u8),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   89","line":"        GADTDataType::UInt16 => expr_lit_int!(u16),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   90","line":"        GADTDataType::UInt32 => expr_lit_int!(u32),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   91","line":"        GADTDataType::UInt64 => expr_lit_int!(u64),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   92","line":"        GADTDataType::Int8 => expr_lit_int!(i8),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   93","line":"        GADTDataType::Int16 => expr_lit_int!(i16),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   94","line":"        GADTDataType::Int32 => expr_lit_int!(i32),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   95","line":"        GADTDataType::Int64 => expr_lit_int!(i64),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   96","line":"        GADTDataType::Float32 => lit(value.interpret::<OCamlFloat>(cr).to_rust::<f64>() as f32),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   97","line":"        GADTDataType::Float64 => lit(value.interpret::<OCamlFloat>(cr).to_rust::<f64>()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   98","line":"        GADTDataType::Utf8 => lit(value.interpret::<String>(cr).to_rust::<String>()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   99","line":"        GADTDataType::Binary => lit(value.interpret::<OCamlBytes>(cr).to_rust::<Vec<u8>>()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  100","line":"        GADTDataType::List(data_type) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"            // Since there is no direct way to create a List-based literal, we"},
{"lineNum":"  102","line":"            // create a one-element series instead, and use that."},
{"lineNum":"  103","line":"            let series = crate::series::series_new(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  104","line":"                cr,"},
{"lineNum":"  105","line":"                &GADTDataType::List(data_type),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"                \"series\","},
{"lineNum":"  107","line":"                vec![value],","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  108","line":"                false,"},
{"lineNum":"  109","line":"            )?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  110","line":"            lit(series)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  112","line":"    };"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    OCaml::box_value(cr, lit)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  115","line":"}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  118","line":"fn rust_expr_naive_date("},
{"lineNum":"  119","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  120","line":"    value: OCamlRef<DynBox<NaiveDate>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  122","line":"    dyn_box!(cr, |value| lit(value))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"}"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  126","line":"fn rust_expr_naive_datetime("},
{"lineNum":"  127","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  128","line":"    value: OCamlRef<DynBox<NaiveDateTime>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  130","line":"    dyn_box!(cr, |value| lit(value))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":"}"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  134","line":"fn rust_expr_series("},
{"lineNum":"  135","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"    series: OCamlRef<DynBox<Series>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  138","line":"    dyn_box!(cr, |series| lit(series))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  139","line":"}"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  142","line":"fn rust_expr_cast("},
{"lineNum":"  143","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"    data_type: OCamlRef<DataType>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  146","line":"    is_strict: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  148","line":"    let PolarsDataType(data_type): PolarsDataType = data_type.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"    let is_strict: bool = is_strict.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  150","line":"    dyn_box!(cr, |expr| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  151","line":"        if is_strict {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  152","line":"            expr.strict_cast(data_type.clone())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  153","line":"        } else {"},
{"lineNum":"  154","line":"            expr.cast(data_type.clone())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  155","line":"        }"},
{"lineNum":"  156","line":"    })"},
{"lineNum":"  157","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  160","line":"fn rust_expr_sort("},
{"lineNum":"  161","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  163","line":"    descending: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  165","line":"    let descending: bool = descending.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"    dyn_box!(cr, |expr| expr.sort(descending))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  167","line":"}"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  170","line":"fn rust_expr_sort_by("},
{"lineNum":"  171","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  173","line":"    descending: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"    by: OCamlRef<OCamlList<DynBox<Expr>>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  176","line":"    let by = unwrap_abstract_vec(by.to_rust(cr));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  177","line":"    let descending: bool = descending.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  178","line":"    let descending = vec![descending; by.len()];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"    dyn_box!(cr, |expr| expr.sort_by(by, descending))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  180","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  183","line":"fn rust_expr_set_sorted_flag("},
{"lineNum":"  184","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":"    is_sorted: OCamlRef<IsSorted>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  188","line":"    let PolarsIsSorted(is_sorted) = is_sorted.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  189","line":"    dyn_box!(cr, |expr| expr.set_sorted_flag(is_sorted))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  190","line":"}"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"expr_op!(rust_expr_first, |expr| expr.first());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  193","line":"expr_op!(rust_expr_last, |expr| expr.last());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  194","line":"expr_op!(rust_expr_reverse, |expr| expr.reverse());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"// TODO: the following functions are ~roughly the same between Expr, Series,"},
{"lineNum":"  197","line":"// and DataFrame; it would be nice if we could reduce the boilerplace around"},
{"lineNum":"  198","line":"// this:"},
{"lineNum":"  199","line":"// - head"},
{"lineNum":"  200","line":"// - tail"},
{"lineNum":"  201","line":"// - sample_n"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  204","line":"fn rust_expr_head("},
{"lineNum":"  205","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  206","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"    length: OCamlRef<Option<OCamlInt>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  208","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  209","line":"    let length = length","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  210","line":"        .to_rust::<Coerce<_, Option<i64>, Option<usize>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  211","line":"        .get()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"    dyn_box!(cr, |expr| expr.head(length))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  214","line":"}"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  217","line":"fn rust_expr_tail("},
{"lineNum":"  218","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  219","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  220","line":"    length: OCamlRef<Option<OCamlInt>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  221","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  222","line":"    let length = length","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  223","line":"        .to_rust::<Coerce<_, Option<i64>, Option<usize>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  224","line":"        .get()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"    dyn_box!(cr, |expr| expr.tail(length))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  227","line":"}"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"expr_op!(rust_expr_take, |expr, idx| expr.take(idx));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":"  232","line":"fn rust_expr_sample_n("},
{"lineNum":"  233","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"    n: OCamlRef<OCamlInt>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"    with_replacement: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  237","line":"    shuffle: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  238","line":"    seed: OCamlRef<Option<OCamlInt>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  239","line":"    fixed_seed: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  241","line":"    let n = n.to_rust::<Coerce<_, i64, usize>>(cr).get()?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  242","line":"    let with_replacement: bool = with_replacement.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  243","line":"    let shuffle: bool = shuffle.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  244","line":"    let seed = seed","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  245","line":"        .to_rust::<Coerce<_, Option<i64>, Option<u64>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":"        .get()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  247","line":"    let fixed_seed = fixed_seed.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"    dyn_box!(cr, |expr| expr.sample_n(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  250","line":"        n,"},
{"lineNum":"  251","line":"        with_replacement,"},
{"lineNum":"  252","line":"        shuffle,"},
{"lineNum":"  253","line":"        seed,"},
{"lineNum":"  254","line":"        fixed_seed"},
{"lineNum":"  255","line":"    ))"},
{"lineNum":"  256","line":"}"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"expr_op!(rust_expr_filter, |expr, predicate| expr.filter(predicate));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  259","line":"expr_op!(rust_expr_ceil, |expr| expr.ceil());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  260","line":"expr_op!(rust_expr_floor, |expr| expr.floor());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  263","line":"fn rust_expr_clip_min_float("},
{"lineNum":"  264","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"    min: OCamlRef<OCamlFloat>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  268","line":"    let min: f64 = min.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"    dyn_box!(cr, |expr| expr.clip_min(AnyValue::Float64(min)))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  270","line":"}"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  273","line":"fn rust_expr_clip_max_float("},
{"lineNum":"  274","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  275","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  276","line":"    max: OCamlRef<OCamlFloat>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  277","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  278","line":"    let max: f64 = max.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  279","line":"    dyn_box!(cr, |expr| expr.clip_max(AnyValue::Float64(max)))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  280","line":"}"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  283","line":"fn rust_expr_clip_min_int("},
{"lineNum":"  284","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  286","line":"    min: OCamlRef<OCamlInt>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  288","line":"    let min: i64 = min.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":"    dyn_box!(cr, |expr| expr.clip_min(AnyValue::Int64(min)))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  290","line":"}"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  293","line":"fn rust_expr_clip_max_int("},
{"lineNum":"  294","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  295","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  296","line":"    max: OCamlRef<OCamlInt>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  298","line":"    let max: i64 = max.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  299","line":"    dyn_box!(cr, |expr| expr.clip_max(AnyValue::Int64(max)))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  300","line":"}"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"expr_op!(rust_expr_pow, |base, exponent| base.pow(exponent));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  303","line":"expr_op!(rust_expr_sum, |expr| expr.sum());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  304","line":"expr_op!(rust_expr_mean, |expr| expr.mean());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  305","line":"expr_op!(rust_expr_median, |expr| expr.median());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  306","line":"expr_op!(rust_expr_mode, |expr| expr.mode());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  307","line":"expr_op!(rust_expr_max, |expr| expr.max());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  308","line":"expr_op!(rust_expr_min, |expr| expr.min());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  309","line":"expr_op!(rust_expr_arg_max, |expr| expr.arg_max());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  310","line":"expr_op!(rust_expr_arg_min, |expr| expr.arg_min());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  311","line":"expr_op!(rust_expr_count, |expr| expr.count());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  314","line":"fn rust_expr_count_(cr: &mut &mut OCamlRuntime, unit: OCamlRef<()>) -> OCaml<DynBox<Expr>> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  315","line":"    let () = unit.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  316","line":"    OCaml::box_value(cr, count())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  317","line":"}"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"expr_op!(rust_expr_n_unique, |expr| expr.n_unique());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  320","line":"expr_op!(rust_expr_approx_n_unique, |expr| expr.approx_n_unique());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  321","line":"expr_op!(rust_expr_explode, |expr| expr.explode());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  324","line":"fn rust_expr_over("},
{"lineNum":"  325","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  327","line":"    partition_by: OCamlRef<OCamlList<DynBox<Expr>>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  328","line":"    mapping_strategy: OCamlRef<WindowMapping>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  330","line":"    let PolarsWindowMapping(mapping_strategy) = mapping_strategy.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  331","line":"    let partition_by: Vec<_> = unwrap_abstract_vec(partition_by.to_rust(cr));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  332","line":"    dyn_box!(cr, |expr| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  333","line":"        expr.over_with_options(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  334","line":"            &partition_by,"},
{"lineNum":"  335","line":"            WindowOptions {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  336","line":"                mapping: mapping_strategy,"},
{"lineNum":"  337","line":"            },"},
{"lineNum":"  338","line":"        )"},
{"lineNum":"  339","line":"    })"},
{"lineNum":"  340","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  343","line":"fn rust_expr_concat_list("},
{"lineNum":"  344","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  345","line":"    exprs: OCamlRef<OCamlList<DynBox<Expr>>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  346","line":") -> OCaml<Result<DynBox<Expr>, String>> {"},
{"lineNum":"  347","line":"    let exprs: Vec<_> = unwrap_abstract_vec(exprs.to_rust(cr));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  348","line":"    concat_list(exprs)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  349","line":"        .map(Abstract)"},
{"lineNum":"  350","line":"        .map_err(|e| e.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  351","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  352","line":"}"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"expr_op!(rust_expr_null_count, |expr| expr.null_count());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  355","line":"expr_op!(rust_expr_is_null, |expr| expr.is_null());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  356","line":"expr_op!(rust_expr_is_not_null, |expr| expr.is_not_null());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  357","line":"expr_op!(rust_expr_is_nan, |expr| expr.is_nan());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  358","line":"expr_op!(rust_expr_is_finite, |expr| expr.is_finite());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  359","line":"expr_op!(rust_expr_is_infinite, |expr| expr.is_infinite());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  360","line":"expr_op!(rust_expr_is_not_nan, |expr| expr.is_not_nan());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  361","line":"expr_op!(rust_expr_fill_null, |expr, with| expr.fill_null(with));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  362","line":"expr_op!(rust_expr_fill_nan, |expr, with| expr.fill_nan(with));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  365","line":"fn rust_expr_fill_null_with_strategy("},
{"lineNum":"  366","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  367","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  368","line":"    strategy: OCamlRef<FillNullStrategy>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  369","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  370","line":"    let PolarsFillNullStrategy(strategy) = strategy.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  371","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  372","line":"        cr,"},
{"lineNum":"  373","line":"        expr,"},
{"lineNum":"  374","line":"        move |series| Ok(Some(series.fill_null(strategy)?)),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  375","line":"        GetOutput::default(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  376","line":"    )"},
{"lineNum":"  377","line":"}"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  380","line":"fn rust_expr_interpolate("},
{"lineNum":"  381","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  382","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  383","line":"    method: OCamlRef<InterpolationMethod>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  384","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  385","line":"    let PolarsInterpolationMethod(method) = method.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  386","line":"    dyn_box!(cr, |expr| expr.interpolate(method))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  387","line":"}"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  390","line":"fn rust_expr_rank("},
{"lineNum":"  391","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  392","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  393","line":"    method: OCamlRef<RankMethod>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  394","line":"    descending: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  395","line":"    seed: OCamlRef<Option<OCamlInt>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  396","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  397","line":"    dyn_box!(cr, |expr| {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  398","line":"        let PolarsRankMethod(method) = method.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  399","line":"        let descending: bool = descending.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  400","line":"        let seed = seed","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  401","line":"            .to_rust::<Coerce<_, Option<i64>, Option<u64>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  402","line":"            .get()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":"        expr.rank(RankOptions { method, descending }, seed)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  404","line":"    })"},
{"lineNum":"  405","line":"}"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"// Diagram of when/then/otherwise chaining:"},
{"lineNum":"  408","line":"// ┌────┐           ┌────┐                ┌───────────┐"},
{"lineNum":"  409","line":"// │When├─.then()──►│Then├────.when()────►│ChainedWhen│◄──┐"},
{"lineNum":"  410","line":"// └────┘           └─┬──┘                └─────┬─────┘   │"},
{"lineNum":"  411","line":"//   ▲                │                         │         │"},
{"lineNum":"  412","line":"//   │                │                         │         │"},
{"lineNum":"  413","line":"//   │           .otherwise()                .then()   .when()"},
{"lineNum":"  414","line":"//   │                │                         │         │"},
{"lineNum":"  415","line":"//   │                ▼                         ▼         │"},
{"lineNum":"  416","line":"// when()           ┌────┐                ┌───────────┐   │"},
{"lineNum":"  417","line":"//                  │Expr│◄──.otherwise()─┤ChainedThen├───┘"},
{"lineNum":"  418","line":"//                  └────┘                └───────────┘"},
{"lineNum":"  419","line":"enum WhenThenClause {"},
{"lineNum":"  420","line":"    Empty,"},
{"lineNum":"  421","line":"    Then(Then),"},
{"lineNum":"  422","line":"    ChainedThen(ChainedThen),"},
{"lineNum":"  423","line":"}"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  426","line":"fn rust_expr_when_then("},
{"lineNum":"  427","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  428","line":"    when_then_clauses: OCamlRef<OCamlList<(DynBox<Expr>, DynBox<Expr>)>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  429","line":"    otherwise: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  430","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  431","line":"    let when_then_clauses: Vec<(Abstract<Expr>, Abstract<Expr>)> = when_then_clauses.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  432","line":"    let when_then_clauses: Vec<(Expr, Expr)> = when_then_clauses","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  433","line":"        .into_iter()"},
{"lineNum":"  434","line":"        .map(|(Abstract(when), Abstract(then))| (when, then))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  435","line":"        .collect();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  436","line":"    dyn_box!(cr, |otherwise| {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  437","line":"        let mut ret = WhenThenClause::Empty;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"        for (when_expr, then_expr) in when_then_clauses {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  440","line":"            match ret {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  441","line":"                WhenThenClause::Empty => {"},
{"lineNum":"  442","line":"                    ret = WhenThenClause::Then(when(when_expr).then(then_expr))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  443","line":"                }"},
{"lineNum":"  444","line":"                WhenThenClause::Then(then) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  445","line":"                    ret = WhenThenClause::ChainedThen(then.when(when_expr).then(then_expr))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  446","line":"                }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  447","line":"                WhenThenClause::ChainedThen(chained_then) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  448","line":"                    ret = WhenThenClause::ChainedThen(chained_then.when(when_expr).then(then_expr))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  449","line":"                }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  450","line":"            }"},
{"lineNum":"  451","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"        match ret {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  454","line":"            WhenThenClause::Empty => otherwise,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  455","line":"            WhenThenClause::Then(then) => then.otherwise(otherwise),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  456","line":"            WhenThenClause::ChainedThen(chained_then) => chained_then.otherwise(otherwise),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  457","line":"        }"},
{"lineNum":"  458","line":"    })","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  459","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  462","line":"fn rust_expr_shift("},
{"lineNum":"  463","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  464","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  465","line":"    periods: OCamlRef<OCamlInt>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  466","line":"    fill_value: OCamlRef<Option<DynBox<Expr>>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  467","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  468","line":"    dyn_box!(cr, |expr| {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  469","line":"        let periods: i64 = periods.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  470","line":"        let fill_value: Option<Abstract<Expr>> = fill_value.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"        match fill_value {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  473","line":"            None => expr.shift(periods),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  474","line":"            Some(Abstract(fill_value)) => expr.shift_and_fill(periods, fill_value),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  475","line":"        }"},
{"lineNum":"  476","line":"    })"},
{"lineNum":"  477","line":"}"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  480","line":"fn rust_expr_cum_count("},
{"lineNum":"  481","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  482","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  483","line":"    reverse: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  484","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  485","line":"    let reverse: bool = reverse.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  486","line":"    dyn_box!(cr, |expr| expr.cumcount(reverse))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  487","line":"}"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  490","line":"fn rust_expr_cum_sum("},
{"lineNum":"  491","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  492","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  493","line":"    reverse: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  494","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  495","line":"    let reverse: bool = reverse.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  496","line":"    dyn_box!(cr, |expr| expr.cumsum(reverse))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  497","line":"}"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  500","line":"fn rust_expr_cum_prod("},
{"lineNum":"  501","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  502","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  503","line":"    reverse: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  504","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  505","line":"    let reverse: bool = reverse.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  506","line":"    dyn_box!(cr, |expr| expr.cumprod(reverse))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  507","line":"}"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  510","line":"fn rust_expr_cum_min("},
{"lineNum":"  511","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  512","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  513","line":"    reverse: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  514","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  515","line":"    let reverse: bool = reverse.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  516","line":"    dyn_box!(cr, |expr| expr.cummin(reverse))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  517","line":"}"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  520","line":"fn rust_expr_cum_max("},
{"lineNum":"  521","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  522","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  523","line":"    reverse: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  524","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  525","line":"    let reverse: bool = reverse.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  526","line":"    dyn_box!(cr, |expr| expr.cummax(reverse))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  527","line":"}"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  530","line":"fn rust_expr_alias("},
{"lineNum":"  531","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  532","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  533","line":"    name: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  534","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  535","line":"    let name: String = name.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  536","line":"    dyn_box!(cr, |expr| expr.alias(&name))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  537","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  540","line":"fn rust_expr_prefix("},
{"lineNum":"  541","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  542","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  543","line":"    prefix: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  544","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  545","line":"    let prefix: String = prefix.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  546","line":"    dyn_box!(cr, |expr| expr.prefix(&prefix))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  547","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  550","line":"fn rust_expr_suffix("},
{"lineNum":"  551","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  552","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  553","line":"    suffix: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  554","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  555","line":"    let suffix: String = suffix.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  556","line":"    dyn_box!(cr, |expr| expr.suffix(&suffix))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  557","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  560","line":"fn rust_expr_round("},
{"lineNum":"  561","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  562","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  563","line":"    decimals: OCamlRef<OCamlInt>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  564","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  565","line":"    let decimals = decimals.to_rust::<Coerce<_, i64, u32>>(cr).get()?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"    dyn_box!(cr, |expr| expr.round(decimals))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  568","line":"}"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"expr_op!(rust_expr_eq, |expr, other| expr.eq(other));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  571","line":"expr_op!(rust_expr_neq, |expr, other| expr.neq(other));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  572","line":"expr_op!(rust_expr_gt, |expr, other| expr.gt(other));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  573","line":"expr_op!(rust_expr_gt_eq, |expr, other| expr.gt_eq(other));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  574","line":"expr_op!(rust_expr_lt, |expr, other| expr.lt(other));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  575","line":"expr_op!(rust_expr_lt_eq, |expr, other| expr.lt_eq(other));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  576","line":"expr_op!(rust_expr_not, |expr| expr.not());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  577","line":"expr_op!(rust_expr_and, |expr, other| expr.and(other));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  578","line":"expr_op!(rust_expr_or, |expr, other| expr.or(other));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  579","line":"expr_op!(rust_expr_xor, |expr, other| expr.xor(other));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  580","line":"expr_op!(rust_expr_add, |expr, other| expr + other);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  581","line":"expr_op!(rust_expr_sub, |expr, other| expr - other);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  582","line":"expr_op!(rust_expr_mul, |expr, other| expr * other);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  583","line":"expr_op!(rust_expr_div, |expr, other| expr / other);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  584","line":"expr_op!(rust_expr_floor_div, |expr, other| expr.floor_div(other));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  587","line":"fn rust_expr_dt_strftime("},
{"lineNum":"  588","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  589","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  590","line":"    format: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  591","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  592","line":"    let format: String = format.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":"    dyn_box!(cr, |expr| expr.dt().to_string(&format))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  594","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  597","line":"fn rust_expr_dt_convert_time_zone("},
{"lineNum":"  598","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  599","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  600","line":"    timezone: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  601","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  602","line":"    let timezone: String = timezone.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  603","line":"    dyn_box!(cr, |expr| expr.dt().convert_time_zone(timezone))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  604","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  607","line":"fn rust_expr_dt_replace_time_zone("},
{"lineNum":"  608","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  609","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  610","line":"    timezone: OCamlRef<Option<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  611","line":"    use_earliest: OCamlRef<Option<bool>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  612","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  613","line":"    let timezone: Option<String> = timezone.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  614","line":"    let use_earliest: Option<bool> = use_earliest.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  615","line":"    dyn_box!(cr, |expr| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  616","line":"        expr.dt().replace_time_zone(timezone, use_earliest)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  617","line":"    })"},
{"lineNum":"  618","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  619","line":""},
{"lineNum":"  620","line":"expr_op!(rust_expr_dt_year, |expr| expr.dt().year());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  621","line":"expr_op!(rust_expr_dt_month, |expr| expr.dt().month());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  622","line":"expr_op!(rust_expr_dt_day, |expr| expr.dt().day());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  625","line":"fn rust_expr_dt_days("},
{"lineNum":"  626","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  627","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  628","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  629","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  630","line":"        cr,"},
{"lineNum":"  631","line":"        expr,"},
{"lineNum":"  632","line":"        |series| Ok(Some(series.duration()?.days().into_series())),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  633","line":"        GetOutput::from_type(DataType::Int64),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  634","line":"    )"},
{"lineNum":"  635","line":"}"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  638","line":"fn rust_expr_dt_hours("},
{"lineNum":"  639","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  640","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  641","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  642","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  643","line":"        cr,"},
{"lineNum":"  644","line":"        expr,"},
{"lineNum":"  645","line":"        |series| Ok(Some(series.duration()?.hours().into_series())),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  646","line":"        GetOutput::from_type(DataType::Int64),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  647","line":"    )"},
{"lineNum":"  648","line":"}"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  651","line":"fn rust_expr_dt_minutes("},
{"lineNum":"  652","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  653","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  654","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  655","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  656","line":"        cr,"},
{"lineNum":"  657","line":"        expr,"},
{"lineNum":"  658","line":"        |series| Ok(Some(series.duration()?.minutes().into_series())),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  659","line":"        GetOutput::from_type(DataType::Int64),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  660","line":"    )"},
{"lineNum":"  661","line":"}"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  664","line":"fn rust_expr_dt_seconds("},
{"lineNum":"  665","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  666","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  667","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  668","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  669","line":"        cr,"},
{"lineNum":"  670","line":"        expr,"},
{"lineNum":"  671","line":"        |series| Ok(Some(series.duration()?.seconds().into_series())),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  672","line":"        GetOutput::from_type(DataType::Int64),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  673","line":"    )"},
{"lineNum":"  674","line":"}"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  677","line":"fn rust_expr_dt_milliseconds("},
{"lineNum":"  678","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  679","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  680","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  681","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  682","line":"        cr,"},
{"lineNum":"  683","line":"        expr,"},
{"lineNum":"  684","line":"        |series| Ok(Some(series.duration()?.milliseconds().into_series())),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  685","line":"        GetOutput::from_type(DataType::Int64),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  686","line":"    )"},
{"lineNum":"  687","line":"}"},
{"lineNum":"  688","line":""},
{"lineNum":"  689","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  690","line":"fn rust_expr_dt_microseconds("},
{"lineNum":"  691","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  692","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  693","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  694","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  695","line":"        cr,"},
{"lineNum":"  696","line":"        expr,"},
{"lineNum":"  697","line":"        |series| Ok(Some(series.duration()?.microseconds().into_series())),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  698","line":"        GetOutput::from_type(DataType::Int64),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  699","line":"    )"},
{"lineNum":"  700","line":"}"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  703","line":"fn rust_expr_dt_nanoseconds("},
{"lineNum":"  704","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  705","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  706","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  707","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  708","line":"        cr,"},
{"lineNum":"  709","line":"        expr,"},
{"lineNum":"  710","line":"        |series| Ok(Some(series.duration()?.nanoseconds().into_series())),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  711","line":"        GetOutput::from_type(DataType::Int64),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  712","line":"    )"},
{"lineNum":"  713","line":"}"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  716","line":"fn rust_expr_str_split("},
{"lineNum":"  717","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  718","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  719","line":"    by: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  720","line":"    inclusive: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  721","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  722","line":"    let by: String = by.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  723","line":"    let inclusive = inclusive.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  724","line":"    dyn_box!(cr, |expr| {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  725","line":"        if inclusive {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  726","line":"            expr.str().split_inclusive(&by)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  727","line":"        } else {"},
{"lineNum":"  728","line":"            expr.str().split(&by)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  729","line":"        }"},
{"lineNum":"  730","line":"    })"},
{"lineNum":"  731","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  732","line":""},
{"lineNum":"  733","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  734","line":"fn rust_expr_str_strptime("},
{"lineNum":"  735","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  736","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  737","line":"    data_type: OCamlRef<DataType>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  738","line":"    format: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  739","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  740","line":"    let PolarsDataType(data_type): PolarsDataType = data_type.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  741","line":"    let format: String = format.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":"    dyn_box!(cr, |expr| {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  744","line":"        // TODO: make other options configurable"},
{"lineNum":"  745","line":"        let options = StrptimeOptions {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  746","line":"            format: Some(format.clone()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  747","line":"            strict: true,"},
{"lineNum":"  748","line":"            exact: true,"},
{"lineNum":"  749","line":"            cache: false,"},
{"lineNum":"  750","line":"            use_earliest: None,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  751","line":"        };"},
{"lineNum":"  752","line":"        expr.str().strptime(data_type.clone(), options)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  753","line":"    })","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  754","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  757","line":"fn rust_expr_str_lengths("},
{"lineNum":"  758","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  759","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  760","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  761","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  762","line":"        cr,"},
{"lineNum":"  763","line":"        expr,"},
{"lineNum":"  764","line":"        |series| Ok(Some(series.utf8()?.str_lengths().into_series())),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  765","line":"        GetOutput::from_type(DataType::UInt32),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  766","line":"    )"},
{"lineNum":"  767","line":"}"},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  770","line":"fn rust_expr_str_n_chars("},
{"lineNum":"  771","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  772","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  773","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  774","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  775","line":"        cr,"},
{"lineNum":"  776","line":"        expr,"},
{"lineNum":"  777","line":"        |series| Ok(Some(series.utf8()?.str_n_chars().into_series())),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  778","line":"        GetOutput::from_type(DataType::UInt32),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  779","line":"    )"},
{"lineNum":"  780","line":"}"},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  783","line":"fn rust_expr_str_contains("},
{"lineNum":"  784","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  785","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  786","line":"    pat: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  787","line":"    literal: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  788","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  789","line":"    let pat: String = pat.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  790","line":"    let literal: bool = literal.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  791","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  792","line":"        cr,"},
{"lineNum":"  793","line":"        expr,"},
{"lineNum":"  794","line":"        move |series| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  795","line":"            let chunked = series.utf8()?;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  796","line":"            let contains = if literal {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  797","line":"                chunked.contains_literal(&pat)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  798","line":"            } else {"},
{"lineNum":"  799","line":"                chunked.contains(&pat, true)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  800","line":"            };"},
{"lineNum":"  801","line":"            Ok(Some(contains?.into_series()))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  802","line":"        },","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  803","line":"        GetOutput::from_type(DataType::Boolean),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  804","line":"    )","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  805","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  806","line":""},
{"lineNum":"  807","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  808","line":"fn rust_expr_str_starts_with("},
{"lineNum":"  809","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  810","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  811","line":"    prefix: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  812","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  813","line":"    let prefix: String = prefix.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  814","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  815","line":"        cr,"},
{"lineNum":"  816","line":"        expr,"},
{"lineNum":"  817","line":"        move |series| Ok(Some(series.utf8()?.starts_with(&prefix).into_series())),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  818","line":"        GetOutput::from_type(DataType::Boolean),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  819","line":"    )","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  820","line":"}"},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  823","line":"fn rust_expr_str_ends_with("},
{"lineNum":"  824","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  825","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  826","line":"    suffix: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  827","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  828","line":"    let suffix: String = suffix.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  829","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  830","line":"        cr,"},
{"lineNum":"  831","line":"        expr,"},
{"lineNum":"  832","line":"        move |series| Ok(Some(series.utf8()?.ends_with(&suffix).into_series())),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  833","line":"        GetOutput::from_type(DataType::Boolean),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  834","line":"    )","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  835","line":"}"},
{"lineNum":"  836","line":""},
{"lineNum":"  837","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  838","line":"fn rust_expr_str_extract("},
{"lineNum":"  839","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  840","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  841","line":"    pat: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  842","line":"    group_index: OCamlRef<OCamlInt>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  843","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  844","line":"    let pat: String = pat.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  845","line":"    let group_index = group_index.to_rust::<Coerce<_, i64, usize>>(cr).get()?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"    dyn_box!(cr, |expr| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  848","line":"        let f = move |series: Series| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  849","line":"            Ok(Some(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  850","line":"                series.utf8()?.extract(&pat, group_index)?.into_series(),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  851","line":"            ))"},
{"lineNum":"  852","line":"        };","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  853","line":"        expr.map(f, GetOutput::from_type(DataType::Utf8))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  854","line":"    })"},
{"lineNum":"  855","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  858","line":"fn rust_expr_str_extract_all("},
{"lineNum":"  859","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  860","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  861","line":"    pat: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  862","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  863","line":"    let pat: String = pat.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  864","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  865","line":"        cr,"},
{"lineNum":"  866","line":"        expr,"},
{"lineNum":"  867","line":"        move |series| Ok(Some(series.utf8()?.extract_all(&pat)?.into_series())),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  868","line":"        GetOutput::from_type(DataType::List(Box::new(DataType::Utf8))),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  869","line":"    )","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  870","line":"}"},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  873","line":"fn rust_expr_str_replace("},
{"lineNum":"  874","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  875","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  876","line":"    pat: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  877","line":"    with: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  878","line":"    literal: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  879","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  880","line":"    let pat: String = pat.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  881","line":"    let with: String = with.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  882","line":"    let literal: bool = literal.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  883","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  884","line":"        cr,"},
{"lineNum":"  885","line":"        expr,"},
{"lineNum":"  886","line":"        move |series| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  887","line":"            let chunked = series.utf8()?;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  888","line":"            let replaced = if literal {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  889","line":"                chunked.replace_literal(&pat, &with, 1)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  890","line":"            } else {"},
{"lineNum":"  891","line":"                chunked.replace(&pat, &with)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  892","line":"            };"},
{"lineNum":"  893","line":"            Ok(Some(replaced?.into_series()))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  894","line":"        },","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  895","line":"        GetOutput::from_type(DataType::List(Box::new(DataType::Utf8))),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  896","line":"    )","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  897","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  900","line":"fn rust_expr_str_replace_all("},
{"lineNum":"  901","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  902","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  903","line":"    pat: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  904","line":"    with: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  905","line":"    literal: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  906","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  907","line":"    let pat: String = pat.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  908","line":"    let with: String = with.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  909","line":"    let literal: bool = literal.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  910","line":"    expr_series_map(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  911","line":"        cr,"},
{"lineNum":"  912","line":"        expr,"},
{"lineNum":"  913","line":"        move |series| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  914","line":"            let chunked = series.utf8()?;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  915","line":"            let replaced = if literal {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  916","line":"                chunked.replace_literal_all(&pat, &with)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  917","line":"            } else {"},
{"lineNum":"  918","line":"                chunked.replace_all(&pat, &with)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  919","line":"            };"},
{"lineNum":"  920","line":"            Ok(Some(replaced?.into_series()))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  921","line":"        },","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  922","line":"        GetOutput::from_type(DataType::List(Box::new(DataType::Utf8))),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  923","line":"    )","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  924","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  927","line":"fn rust_expr_str_strip("},
{"lineNum":"  928","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  929","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  930","line":"    matches: OCamlRef<Option<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  931","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  932","line":"    let matches: Option<String> = matches.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  933","line":"    dyn_box!(cr, |expr| expr.str().strip(matches))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  934","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  935","line":""},
{"lineNum":"  936","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  937","line":"fn rust_expr_str_lstrip("},
{"lineNum":"  938","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  939","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  940","line":"    matches: OCamlRef<Option<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  941","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  942","line":"    let matches: Option<String> = matches.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  943","line":"    dyn_box!(cr, |expr| expr.str().lstrip(matches))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  944","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  945","line":""},
{"lineNum":"  946","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  947","line":"fn rust_expr_str_rstrip("},
{"lineNum":"  948","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  949","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  950","line":"    matches: OCamlRef<Option<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  951","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  952","line":"    let matches: Option<String> = matches.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  953","line":"    dyn_box!(cr, |expr| expr.str().rstrip(matches))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  954","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"expr_op!(rust_expr_str_to_lowercase, |expr| expr.str().to_lowercase());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  957","line":"expr_op!(rust_expr_str_to_uppercase, |expr| expr.str().to_uppercase());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  960","line":"fn rust_expr_str_slice("},
{"lineNum":"  961","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  962","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  963","line":"    start: OCamlRef<OCamlInt>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  964","line":"    length: OCamlRef<Option<OCamlInt>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  965","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  966","line":"    let start: i64 = start.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  967","line":"    let length = length","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  968","line":"        .to_rust::<Coerce<_, Option<i64>, Option<u64>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  969","line":"        .get()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  970","line":"    dyn_box!(cr, |expr| expr.str().str_slice(start, length))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  971","line":"}"},
{"lineNum":"  972","line":""},
{"lineNum":"  973","line":"expr_op!(rust_expr_list_lengths, |expr| expr.list().lengths());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  974","line":"expr_op!(rust_expr_list_slice, |expr, offset, length| {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  975","line":"    expr.list().slice(offset, length)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  976","line":"});"},
{"lineNum":"  977","line":"expr_op!(rust_expr_list_head, |expr, n| expr.list().head(n));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  978","line":"expr_op!(rust_expr_list_tail, |expr, n| expr.list().tail(n));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  979","line":"expr_op!(rust_expr_list_sum, |expr| expr.list().sum());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  980","line":""},
{"lineNum":"  981","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  982","line":"fn rust_expr_list_eval("},
{"lineNum":"  983","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  984","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  985","line":"    other: OCamlRef<DynBox<Expr>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  986","line":"    parallel: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  987","line":") -> OCaml<DynBox<Expr>> {"},
{"lineNum":"  988","line":"    let parallel = parallel.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  989","line":"    dyn_box!(cr, |expr, other| expr.list().eval(other, parallel))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  990","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "inline_test_runner_polars_async.exe", "date" : "2023-09-17 15:58:19", "instrumented" : 586, "covered" : 0,};
var merged_data = [];
