var data = {lines:[
{"lineNum":"    1","line":"use crate::utils::*;"},
{"lineNum":"    2","line":"use chrono::naive::{NaiveDate, NaiveDateTime};"},
{"lineNum":"    3","line":"use ocaml_interop::{"},
{"lineNum":"    4","line":"    BoxRoot, DynBox, OCaml, OCamlBytes, OCamlFloat, OCamlInt, OCamlList, OCamlRef, OCamlRuntime,"},
{"lineNum":"    5","line":"    ToOCaml,"},
{"lineNum":"    6","line":"};"},
{"lineNum":"    7","line":"use polars::prelude::prelude::*;"},
{"lineNum":"    8","line":"use polars::prelude::*;"},
{"lineNum":"    9","line":"use polars_ocaml_macros::ocaml_interop_export;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// The rough idea of functions which take GADTDataType is that the argument or"},
{"lineNum":"   12","line":"// the return type depends on the value of the GADTDataType, so we hide the"},
{"lineNum":"   13","line":"// actual type of the argument or return value behind a DummyBoxRoot and"},
{"lineNum":"   14","line":"// interpret it with or produce the value of the correct type later."},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// In the case of series_new takes a vec of DummyBoxRoots, and we recurse when"},
{"lineNum":"   17","line":"// data_type turns out to be a GADTDataType::List(inner_data_type)."},
{"lineNum":"   18","line":"pub fn series_new(","class":"linePartCov","hits":"1","order":"14","possible_hits":"3",},
{"lineNum":"   19","line":"    cr: &mut &mut OCamlRuntime,","class":"linePartCov","hits":"6","order":"18","possible_hits":"26",},
{"lineNum":"   20","line":"    data_type: &GADTDataType,"},
{"lineNum":"   21","line":"    name: &str,"},
{"lineNum":"   22","line":"    // TODO: can we just pass a DummyBoxRoot here instead of a Vec, and save a copy?"},
{"lineNum":"   23","line":"    values: Vec<DummyBoxRoot>,"},
{"lineNum":"   24","line":"    are_values_options: bool,"},
{"lineNum":"   25","line":") -> Result<Series, String> {"},
{"lineNum":"   26","line":"    macro_rules! create_series {"},
{"lineNum":"   27","line":"        ($ocaml_type:ty, $rust_type:ty) => {{"},
{"lineNum":"   28","line":"            if are_values_options {"},
{"lineNum":"   29","line":"                let values: Vec<Option<$rust_type>> = values"},
{"lineNum":"   30","line":"                    .into_iter()"},
{"lineNum":"   31","line":"                    .map(|v| v.interpret::<Option<$ocaml_type>>(cr).to_rust())","class":"linePartCov","hits":"2","order":"651","possible_hits":"8",},
{"lineNum":"   32","line":"                    .collect();"},
{"lineNum":"   33","line":"                Ok(Series::new(&name, values))"},
{"lineNum":"   34","line":"            } else {"},
{"lineNum":"   35","line":"                let values: Vec<$rust_type> = values"},
{"lineNum":"   36","line":"                    .into_iter()"},
{"lineNum":"   37","line":"                    .map(|v| v.interpret::<$ocaml_type>(cr).to_rust())","class":"linePartCov","hits":"6","order":"17","possible_hits":"8",},
{"lineNum":"   38","line":"                    .collect();"},
{"lineNum":"   39","line":"                Ok(Series::new(&name, values))"},
{"lineNum":"   40","line":"            }"},
{"lineNum":"   41","line":"        }};"},
{"lineNum":"   42","line":"    }"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    macro_rules! create_int_series {"},
{"lineNum":"   45","line":"        ($rust_type:ty) => {{"},
{"lineNum":"   46","line":"            if are_values_options {"},
{"lineNum":"   47","line":"                let values = values"},
{"lineNum":"   48","line":"                    .into_iter()"},
{"lineNum":"   49","line":"                    .map("},
{"lineNum":"   50","line":"                        |v| match v.interpret::<Option<OCamlInt>>(cr).to_rust::<Option<i64>>() {","class":"linePartCov","hits":"3","order":"745","possible_hits":"40",},
{"lineNum":"   51","line":"                            None => Ok(None),","class":"linePartCov","hits":"1","order":"748","possible_hits":"8",},
{"lineNum":"   52","line":"                            Some(int) => int.try_into().map(Some),","class":"linePartCov","hits":"2","order":"746","possible_hits":"16",},
{"lineNum":"   53","line":"                        },","class":"linePartCov","hits":"1","order":"747","possible_hits":"16",},
{"lineNum":"   54","line":"                    )"},
{"lineNum":"   55","line":"                    .collect::<Result<Vec<Option<$rust_type>>, _>>()"},
{"lineNum":"   56","line":"                    .map_err(|err| err.to_string())?;","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"   57","line":"                Ok(Series::new(&name, values))"},
{"lineNum":"   58","line":"            } else {"},
{"lineNum":"   59","line":"                let values = values"},
{"lineNum":"   60","line":"                    .into_iter()"},
{"lineNum":"   61","line":"                    .map(|v| v.interpret::<OCamlInt>(cr).to_rust::<i64>().try_into())","class":"linePartCov","hits":"2","order":"27","possible_hits":"16",},
{"lineNum":"   62","line":"                    .collect::<Result<Vec<$rust_type>, _>>()"},
{"lineNum":"   63","line":"                    .map_err(|err| err.to_string())?;","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"   64","line":"                Ok(Series::new(&name, values))"},
{"lineNum":"   65","line":"            }"},
{"lineNum":"   66","line":"        }};"},
{"lineNum":"   67","line":"    }"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    match data_type {","class":"lineCov","hits":"1","order":"15","possible_hits":"1",},
{"lineNum":"   70","line":"        GADTDataType::Boolean => create_series!(bool, bool),","class":"linePartCov","hits":"3","order":"788","possible_hits":"4",},
{"lineNum":"   71","line":"        GADTDataType::UInt8 => create_int_series!(u8),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   72","line":"        GADTDataType::UInt16 => create_int_series!(u16),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   73","line":"        GADTDataType::UInt32 => create_int_series!(u32),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   74","line":"        GADTDataType::UInt64 => create_int_series!(u64),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   75","line":"        GADTDataType::Int8 => create_int_series!(i8),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   76","line":"        GADTDataType::Int16 => create_int_series!(i16),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   77","line":"        GADTDataType::Int32 => create_int_series!(i32),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   78","line":"        GADTDataType::Int64 => create_int_series!(i64),","class":"lineCov","hits":"3","order":"26","possible_hits":"3",},
{"lineNum":"   79","line":"        GADTDataType::Float32 => {"},
{"lineNum":"   80","line":"            if are_values_options {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   81","line":"                let values: Vec<Option<f32>> = values","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   82","line":"                    .into_iter()"},
{"lineNum":"   83","line":"                    .map(|v| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   84","line":"                        v.interpret::<Option<OCamlFloat>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   85","line":"                            .to_rust::<Option<f64>>()"},
{"lineNum":"   86","line":"                            .map(|f64| f64 as f32)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   87","line":"                    })","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   88","line":"                    .collect();"},
{"lineNum":"   89","line":"                Ok(Series::new(&name, values))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"            } else {"},
{"lineNum":"   91","line":"                let values: Vec<f32> = values","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   92","line":"                    .into_iter()"},
{"lineNum":"   93","line":"                    .map(|v| v.interpret::<OCamlFloat>(cr).to_rust::<f64>() as f32)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   94","line":"                    .collect();"},
{"lineNum":"   95","line":"                Ok(Series::new(&name, values))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"            }"},
{"lineNum":"   97","line":"        }"},
{"lineNum":"   98","line":"        GADTDataType::Float64 => create_series!(OCamlFloat, f64),","class":"lineCov","hits":"2","order":"455","possible_hits":"2",},
{"lineNum":"   99","line":"        GADTDataType::Utf8 => create_series!(String, String),","class":"lineCov","hits":"2","order":"16","possible_hits":"2",},
{"lineNum":"  100","line":"        GADTDataType::Binary => create_series!(OCamlBytes, Vec<u8>),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  101","line":"        GADTDataType::List(data_type) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"            // Series creation doesn\'t work for empty lists and use of"},
{"lineNum":"  103","line":"            // `Series::new_empty` is suggested instead."},
{"lineNum":"  104","line":"            // https://github.com/pola-rs/polars/pull/10558#issuecomment-1684923274"},
{"lineNum":"  105","line":"            if values.is_empty() {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  106","line":"                let data_type = DataType::List(Box::new(data_type.to_data_type()));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  107","line":"                return Ok(Series::new_empty(&name, &data_type));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  108","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"            if are_values_options {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  111","line":"                let values: Vec<Option<Series>> = values","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  112","line":"                    .into_iter()"},
{"lineNum":"  113","line":"                    .map(|v| {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  114","line":"                        match v.interpret::<Option<OCamlList<DummyBoxRoot>>>(cr).to_rust() {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  115","line":"                            None => Ok(None),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"                            Some(list) => series_new(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  117","line":"                                cr, data_type, name, list,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"                                // The OCaml GADT\'s type assumes all values are non-null for simplicity,"},
{"lineNum":"  119","line":"                                // but we expose a top-level function that allows the outermost layer"},
{"lineNum":"  120","line":"                                // to be optional. So, all recursive layers are non-optional so"},
{"lineNum":"  121","line":"                                // are_values_options=false."},
{"lineNum":"  122","line":"                                false,"},
{"lineNum":"  123","line":"                            )"},
{"lineNum":"  124","line":"                            .map(Some),"},
{"lineNum":"  125","line":"                        }"},
{"lineNum":"  126","line":"                    })","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  127","line":"                    .collect::<Result<Vec<Option<Series>>, _>>()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"                Ok(Series::new(&name, values))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  129","line":"            } else {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  130","line":"                let values: Vec<Series> = values","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  131","line":"                    .into_iter()"},
{"lineNum":"  132","line":"                    .map(|v| {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  133","line":"                        let list = v.interpret::<OCamlList<DummyBoxRoot>>(cr).to_rust();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  134","line":"                        series_new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"                            cr, data_type, name, list, // See call above to series_new","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"                            false,"},
{"lineNum":"  137","line":"                        )"},
{"lineNum":"  138","line":"                    })","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  139","line":"                    .collect::<Result<Vec<Series>, _>>()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"                Ok(Series::new(&name, values))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  142","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  143","line":"        }"},
{"lineNum":"  144","line":"    }"},
{"lineNum":"  145","line":"}","class":"linePartCov","hits":"1","order":"23","possible_hits":"6",},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"#[ocaml_interop_export(raise_on_err)]","class":"linePartCov","hits":"10","order":"1","possible_hits":"14",},
{"lineNum":"  148","line":"fn rust_series_new("},
{"lineNum":"  149","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"2","possible_hits":"1",},
{"lineNum":"  150","line":"    data_type: OCamlRef<GADTDataType>,","class":"lineCov","hits":"1","order":"3","possible_hits":"1",},
{"lineNum":"  151","line":"    name: OCamlRef<String>,","class":"lineCov","hits":"1","order":"5","possible_hits":"1",},
{"lineNum":"  152","line":"    values: OCamlRef<OCamlList<DummyBoxRoot>>,","class":"lineCov","hits":"1","order":"6","possible_hits":"1",},
{"lineNum":"  153","line":") -> OCaml<DynBox<Series>> {"},
{"lineNum":"  154","line":"    let name: String = name.to_rust(cr);","class":"lineCov","hits":"1","order":"7","possible_hits":"1",},
{"lineNum":"  155","line":"    let data_type: GADTDataType = data_type.to_rust(cr);","class":"lineCov","hits":"2","order":"8","possible_hits":"2",},
{"lineNum":"  156","line":"    let values: Vec<DummyBoxRoot> = values.to_rust(cr);","class":"lineCov","hits":"2","order":"9","possible_hits":"2",},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    let series = series_new(cr, &data_type, &name, values, false)?;","class":"linePartCov","hits":"2","order":"13","possible_hits":"3",},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    OCaml::box_value(cr, series)","class":"lineCov","hits":"2","order":"24","possible_hits":"2",},
{"lineNum":"  161","line":"}","class":"linePartCov","hits":"1","order":"25","possible_hits":"8",},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"#[ocaml_interop_export(raise_on_err)]","class":"linePartCov","hits":"10","order":"642","possible_hits":"14",},
{"lineNum":"  164","line":"fn rust_series_new_option("},
{"lineNum":"  165","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"643","possible_hits":"1",},
{"lineNum":"  166","line":"    data_type: OCamlRef<GADTDataType>,","class":"lineCov","hits":"1","order":"644","possible_hits":"1",},
{"lineNum":"  167","line":"    name: OCamlRef<String>,","class":"lineCov","hits":"1","order":"645","possible_hits":"1",},
{"lineNum":"  168","line":"    values: OCamlRef<OCamlList<DummyBoxRoot>>,","class":"lineCov","hits":"1","order":"646","possible_hits":"1",},
{"lineNum":"  169","line":") -> OCaml<DynBox<Series>> {"},
{"lineNum":"  170","line":"    let name: String = name.to_rust(cr);","class":"lineCov","hits":"1","order":"647","possible_hits":"1",},
{"lineNum":"  171","line":"    let data_type: GADTDataType = data_type.to_rust(cr);","class":"lineCov","hits":"2","order":"648","possible_hits":"2",},
{"lineNum":"  172","line":"    let values: Vec<DummyBoxRoot> = values.to_rust(cr);","class":"lineCov","hits":"2","order":"649","possible_hits":"2",},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"    let series = series_new(cr, &data_type, &name, values, true)?;","class":"linePartCov","hits":"2","order":"650","possible_hits":"3",},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    OCaml::box_value(cr, series)","class":"lineCov","hits":"2","order":"652","possible_hits":"2",},
{"lineNum":"  177","line":"}","class":"linePartCov","hits":"1","order":"653","possible_hits":"8",},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  180","line":"fn rust_series_new_array("},
{"lineNum":"  181","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"    data_type: OCamlRef<GADTDataType>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"    name: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"    values: OCamlRef<OCamlUniformArray<DummyBoxRoot>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":") -> OCaml<DynBox<Series>> {"},
{"lineNum":"  186","line":"    let name: String = name.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"    let data_type: GADTDataType = data_type.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  188","line":"    let values: Vec<DummyBoxRoot> = values.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    let series = series_new(cr, &data_type, &name, values, false)?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    OCaml::box_value(cr, series)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  193","line":"}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  196","line":"fn rust_series_new_option_array("},
{"lineNum":"  197","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"    data_type: OCamlRef<GADTDataType>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"    name: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"    values: OCamlRef<OCamlUniformArray<DummyBoxRoot>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  201","line":") -> OCaml<DynBox<Series>> {"},
{"lineNum":"  202","line":"    let name: String = name.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"    let data_type: GADTDataType = data_type.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  204","line":"    let values: Vec<DummyBoxRoot> = values.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    let series = series_new(cr, &data_type, &name, values, true)?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"    OCaml::box_value(cr, series)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  209","line":"}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"#[ocaml_interop_export]","class":"linePartCov","hits":"7","order":"117","possible_hits":"10",},
{"lineNum":"  212","line":"fn rust_series_new_datetime("},
{"lineNum":"  213","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"118","possible_hits":"1",},
{"lineNum":"  214","line":"    name: OCamlRef<String>,","class":"lineCov","hits":"1","order":"119","possible_hits":"1",},
{"lineNum":"  215","line":"    values: OCamlRef<OCamlList<DynBox<NaiveDateTime>>>,","class":"lineCov","hits":"1","order":"120","possible_hits":"1",},
{"lineNum":"  216","line":") -> OCaml<DynBox<Series>> {"},
{"lineNum":"  217","line":"    let name: String = name.to_rust(cr);","class":"lineCov","hits":"1","order":"121","possible_hits":"1",},
{"lineNum":"  218","line":"    let values = unwrap_abstract_vec(values.to_rust(cr));","class":"lineCov","hits":"2","order":"122","possible_hits":"2",},
{"lineNum":"  219","line":"    OCaml::box_value(cr, Series::new(&name, values))","class":"lineCov","hits":"2","order":"123","possible_hits":"2",},
{"lineNum":"  220","line":"}","class":"linePartCov","hits":"1","order":"124","possible_hits":"4",},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  223","line":"fn rust_series_new_datetime_option("},
{"lineNum":"  224","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  225","line":"    name: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  226","line":"    values: OCamlRef<OCamlList<Option<DynBox<NaiveDateTime>>>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  227","line":") -> OCaml<DynBox<Series>> {"},
{"lineNum":"  228","line":"    let name: String = name.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  229","line":"    let values: Vec<Option<NaiveDateTime>> = values","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  230","line":"        .to_rust::<Vec<Option<_>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  231","line":"        .into_iter()"},
{"lineNum":"  232","line":"        .map(|o| o.map(|Abstract(v)| v))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  233","line":"        .collect();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    OCaml::box_value(cr, Series::new(&name, values))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  236","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"#[ocaml_interop_export]","class":"linePartCov","hits":"7","order":"1066","possible_hits":"10",},
{"lineNum":"  239","line":"fn rust_series_new_date("},
{"lineNum":"  240","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"1067","possible_hits":"1",},
{"lineNum":"  241","line":"    name: OCamlRef<String>,","class":"lineCov","hits":"1","order":"1068","possible_hits":"1",},
{"lineNum":"  242","line":"    values: OCamlRef<OCamlList<DynBox<NaiveDate>>>,","class":"lineCov","hits":"1","order":"1069","possible_hits":"1",},
{"lineNum":"  243","line":") -> OCaml<DynBox<Series>> {"},
{"lineNum":"  244","line":"    let name: String = name.to_rust(cr);","class":"lineCov","hits":"1","order":"1070","possible_hits":"1",},
{"lineNum":"  245","line":"    let values = unwrap_abstract_vec(values.to_rust(cr));","class":"lineCov","hits":"2","order":"1071","possible_hits":"2",},
{"lineNum":"  246","line":"    OCaml::box_value(cr, Series::new(&name, values))","class":"lineCov","hits":"2","order":"1072","possible_hits":"2",},
{"lineNum":"  247","line":"}","class":"linePartCov","hits":"1","order":"1073","possible_hits":"4",},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  250","line":"fn rust_series_new_date_option("},
{"lineNum":"  251","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  252","line":"    name: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":"    values: OCamlRef<OCamlList<Option<DynBox<NaiveDate>>>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  254","line":") -> OCaml<DynBox<Series>> {"},
{"lineNum":"  255","line":"    let name: String = name.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":"    let values: Vec<Option<NaiveDate>> = values","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  257","line":"        .to_rust::<Vec<Option<_>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  258","line":"        .into_iter()"},
{"lineNum":"  259","line":"        .map(|o| o.map(|Abstract(v)| v))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  260","line":"        .collect();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"    OCaml::box_value(cr, Series::new(&name, values))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  263","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"#[ocaml_interop_export]","class":"linePartCov","hits":"10","order":"370","possible_hits":"13",},
{"lineNum":"  266","line":"fn rust_series_date_range("},
{"lineNum":"  267","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"371","possible_hits":"1",},
{"lineNum":"  268","line":"    name: OCamlRef<String>,","class":"lineCov","hits":"1","order":"372","possible_hits":"1",},
{"lineNum":"  269","line":"    start: OCamlRef<DynBox<NaiveDateTime>>,","class":"lineCov","hits":"1","order":"373","possible_hits":"1",},
{"lineNum":"  270","line":"    stop: OCamlRef<DynBox<NaiveDateTime>>,","class":"lineCov","hits":"1","order":"374","possible_hits":"1",},
{"lineNum":"  271","line":"    every: OCamlRef<Option<String>>,","class":"lineCov","hits":"1","order":"375","possible_hits":"1",},
{"lineNum":"  272","line":"    cast_to_date: OCamlRef<bool>,","class":"lineCov","hits":"1","order":"376","possible_hits":"1",},
{"lineNum":"  273","line":") -> OCaml<Result<DynBox<Series>, String>> {"},
{"lineNum":"  274","line":"    let name: String = name.to_rust(cr);","class":"lineCov","hits":"1","order":"377","possible_hits":"1",},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"    let Abstract(start) = start.to_rust(cr);","class":"lineCov","hits":"2","order":"378","possible_hits":"2",},
{"lineNum":"  277","line":"    let Abstract(stop) = stop.to_rust(cr);","class":"lineCov","hits":"1","order":"379","possible_hits":"1",},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"    let every: String = every","class":"lineCov","hits":"2","order":"381","possible_hits":"2",},
{"lineNum":"  280","line":"        .to_rust::<Option<String>>(cr)","class":"lineCov","hits":"2","order":"380","possible_hits":"2",},
{"lineNum":"  281","line":"        .unwrap_or(\"1d\".to_string());","class":"linePartCov","hits":"2","order":"382","possible_hits":"3",},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"    let cast_to_date: bool = cast_to_date.to_rust(cr);","class":"lineCov","hits":"2","order":"383","possible_hits":"2",},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"    let series = date_range(","class":"lineCov","hits":"2","order":"389","possible_hits":"2",},
{"lineNum":"  286","line":"        &name,","class":"lineCov","hits":"1","order":"384","possible_hits":"1",},
{"lineNum":"  287","line":"        start,"},
{"lineNum":"  288","line":"        stop,"},
{"lineNum":"  289","line":"        Duration::parse(&every),","class":"lineCov","hits":"1","order":"385","possible_hits":"1",},
{"lineNum":"  290","line":"        ClosedWindow::Both,","class":"lineCov","hits":"1","order":"386","possible_hits":"1",},
{"lineNum":"  291","line":"        TimeUnit::Milliseconds,","class":"lineCov","hits":"1","order":"387","possible_hits":"1",},
{"lineNum":"  292","line":"        None,","class":"lineCov","hits":"1","order":"388","possible_hits":"1",},
{"lineNum":"  293","line":"    )"},
{"lineNum":"  294","line":"    .and_then(|date_range| {","class":"linePartCov","hits":"2","order":"390","possible_hits":"4",},
{"lineNum":"  295","line":"        let series = date_range.into_series();","class":"lineCov","hits":"1","order":"391","possible_hits":"1",},
{"lineNum":"  296","line":"        if cast_to_date {","class":"lineCov","hits":"2","order":"392","possible_hits":"2",},
{"lineNum":"  297","line":"            series.cast(&DataType::Date)","class":"lineCov","hits":"2","order":"393","possible_hits":"2",},
{"lineNum":"  298","line":"        } else {"},
{"lineNum":"  299","line":"            Ok(series)","class":"lineCov","hits":"1","order":"444","possible_hits":"1",},
{"lineNum":"  300","line":"        }"},
{"lineNum":"  301","line":"    })","class":"lineCov","hits":"2","order":"394","possible_hits":"2",},
{"lineNum":"  302","line":"    .map(Abstract)"},
{"lineNum":"  303","line":"    .map_err(|err| err.to_string());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"    series.to_ocaml(cr)","class":"lineCov","hits":"2","order":"395","possible_hits":"2",},
{"lineNum":"  306","line":"}","class":"linePartCov","hits":"1","order":"396","possible_hits":"4",},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"fn series_to_boxrooted_ocaml_list(","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  309","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  310","line":"    data_type: &GADTDataType,"},
{"lineNum":"  311","line":"    series: Series,"},
{"lineNum":"  312","line":"    allow_nulls: bool,"},
{"lineNum":"  313","line":") -> Result<DummyBoxRoot, String> {"},
{"lineNum":"  314","line":"    if !allow_nulls && series.null_count() > 0 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  315","line":"        return Err(format!(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  316","line":"            \"Series contains {} null values, expected none\","},
{"lineNum":"  317","line":"            series.null_count()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  318","line":"        )"},
{"lineNum":"  319","line":"        .to_string());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  320","line":"    }"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"    macro_rules! create_boxrooted_ocaml_list {"},
{"lineNum":"  323","line":"        ($rust_type:ty, $ocaml_type:ty, $body:expr) => {{"},
{"lineNum":"  324","line":"            let vec: Vec<$rust_type> = $body;"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"            let return_value: BoxRoot<OCamlList<$ocaml_type>> = vec.to_ocaml(cr).root();"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"            Ok(unsafe { DummyBoxRoot::new(return_value) })"},
{"lineNum":"  329","line":"        }};"},
{"lineNum":"  330","line":"    }"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"    macro_rules! create_boxrooted_ocaml_list_handle_nulls {"},
{"lineNum":"  333","line":"        ($rust_type:ty, $ocaml_type:ty, $body_allow_nulls:expr, $body_disallow_nulls:expr) => {{"},
{"lineNum":"  334","line":"            if allow_nulls {"},
{"lineNum":"  335","line":"                create_boxrooted_ocaml_list!("},
{"lineNum":"  336","line":"                    Option<$rust_type>,"},
{"lineNum":"  337","line":"                    Option<$ocaml_type>,"},
{"lineNum":"  338","line":"                    $body_allow_nulls"},
{"lineNum":"  339","line":"                )"},
{"lineNum":"  340","line":"            } else {"},
{"lineNum":"  341","line":"                create_boxrooted_ocaml_list!($rust_type, $ocaml_type, $body_disallow_nulls)"},
{"lineNum":"  342","line":"            }"},
{"lineNum":"  343","line":"        }};"},
{"lineNum":"  344","line":"    }"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"    macro_rules! ocaml_intable {"},
{"lineNum":"  347","line":"        ($rust_type:ty, $ca:expr) => {{"},
{"lineNum":"  348","line":"            let ca = $ca.map_err(|err| err.to_string())?;","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"            create_boxrooted_ocaml_list_handle_nulls!("},
{"lineNum":"  351","line":"                OCamlIntable<$rust_type>,"},
{"lineNum":"  352","line":"                OCamlInt,"},
{"lineNum":"  353","line":"                ca.into_iter().map(|n| n.map(OCamlIntable)).collect(),","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  354","line":"                {"},
{"lineNum":"  355","line":"                    let mut buf = Vec::with_capacity(ca.len());"},
{"lineNum":"  356","line":"                    for arr in ca.downcast_iter() {"},
{"lineNum":"  357","line":"                        buf.extend(arr.values_iter().map(|n| OCamlIntable(*n)))","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  358","line":"                    }"},
{"lineNum":"  359","line":"                    buf"},
{"lineNum":"  360","line":"                }"},
{"lineNum":"  361","line":"            )"},
{"lineNum":"  362","line":"        }};"},
{"lineNum":"  363","line":"    }"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"    match data_type {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  366","line":"        GADTDataType::Boolean => {"},
{"lineNum":"  367","line":"            let ca = series.bool().map_err(|err| err.to_string())?;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"            create_boxrooted_ocaml_list_handle_nulls!(bool, bool, ca.into_iter().collect(), {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  370","line":"                let mut buf = Vec::with_capacity(ca.len());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  371","line":"                for arr in ca.downcast_iter() {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  372","line":"                    buf.extend(arr.values_iter())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  373","line":"                }"},
{"lineNum":"  374","line":"                buf","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  375","line":"            })","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  376","line":"        }"},
{"lineNum":"  377","line":"        GADTDataType::UInt8 => ocaml_intable!(u8, series.u8()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  378","line":"        GADTDataType::UInt16 => ocaml_intable!(u16, series.u16()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  379","line":"        GADTDataType::UInt32 => ocaml_intable!(u32, series.u32()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  380","line":"        GADTDataType::UInt64 => ocaml_intable!(u64, series.u64()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  381","line":"        GADTDataType::Int8 => ocaml_intable!(i8, series.i8()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  382","line":"        GADTDataType::Int16 => ocaml_intable!(i16, series.i16()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  383","line":"        GADTDataType::Int32 => ocaml_intable!(i32, series.i32()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  384","line":"        GADTDataType::Int64 => ocaml_intable!(i64, series.i64()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  385","line":"        GADTDataType::Float32 => {"},
{"lineNum":"  386","line":"            let ca = series.f32().map_err(|err| err.to_string())?;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"            create_boxrooted_ocaml_list_handle_nulls!(","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  389","line":"                f64,"},
{"lineNum":"  390","line":"                OCamlFloat,"},
{"lineNum":"  391","line":"                ca.into_iter()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  392","line":"                    .map(|f32o| f32o.map(|f32| f32 as f64))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  393","line":"                    .collect(),"},
{"lineNum":"  394","line":"                {"},
{"lineNum":"  395","line":"                    let mut buf = Vec::with_capacity(ca.len());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  396","line":"                    for arr in ca.downcast_iter() {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  397","line":"                        buf.extend(arr.values_iter().map(|f32| *f32 as f64))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  398","line":"                    }"},
{"lineNum":"  399","line":"                    buf","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  400","line":"                }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  401","line":"            )"},
{"lineNum":"  402","line":"        }"},
{"lineNum":"  403","line":"        GADTDataType::Float64 => {"},
{"lineNum":"  404","line":"            let ca = series.f64().map_err(|err| err.to_string())?;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"            create_boxrooted_ocaml_list_handle_nulls!(f64, OCamlFloat, ca.into_iter().collect(), {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  407","line":"                let mut buf = Vec::with_capacity(ca.len());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  408","line":"                for arr in ca.downcast_iter() {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  409","line":"                    buf.extend(arr.values_iter())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  410","line":"                }"},
{"lineNum":"  411","line":"                buf","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  412","line":"            })","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  413","line":"        }"},
{"lineNum":"  414","line":"        GADTDataType::Utf8 => {"},
{"lineNum":"  415","line":"            let ca = series.utf8().map_err(|err| err.to_string())?;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  416","line":"            create_boxrooted_ocaml_list_handle_nulls!(&str, String, ca.into_iter().collect(), {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  417","line":"                let mut buf = Vec::with_capacity(ca.len());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  418","line":"                for arr in ca.downcast_iter() {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  419","line":"                    buf.extend(arr.values_iter())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  420","line":"                }"},
{"lineNum":"  421","line":"                buf","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  422","line":"            })","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  423","line":"        }"},
{"lineNum":"  424","line":"        GADTDataType::Binary => {"},
{"lineNum":"  425","line":"            let ca = series.binary().map_err(|err| err.to_string())?;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"            create_boxrooted_ocaml_list_handle_nulls!(&[u8], String, ca.into_iter().collect(), {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  428","line":"                let mut buf = Vec::with_capacity(ca.len());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  429","line":"                for arr in ca.downcast_iter() {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  430","line":"                    buf.extend(arr.values_iter())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  431","line":"                }"},
{"lineNum":"  432","line":"                buf","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  433","line":"            })","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  434","line":"        }"},
{"lineNum":"  435","line":"        GADTDataType::List(data_type) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  436","line":"            let ca = series.list().map_err(|err| err.to_string())?;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"            create_boxrooted_ocaml_list_handle_nulls!(","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  439","line":"                DummyBoxRoot,"},
{"lineNum":"  440","line":"                DummyBoxRoot,"},
{"lineNum":"  441","line":"                ca.into_iter()","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  442","line":"                    .map(|serieso| match serieso {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  443","line":"                        None => Ok(None),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  444","line":"                        Some(series) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  445","line":"                            // See comment on similar recursive call in series_new on why allow_nulls=false"},
{"lineNum":"  446","line":"                            series_to_boxrooted_ocaml_list(cr, data_type, series, false).map(Some)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  447","line":"                        }"},
{"lineNum":"  448","line":"                    })","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  449","line":"                    .collect::<Result<_, _>>()?,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  450","line":"                {"},
{"lineNum":"  451","line":"                    let mut buf = Vec::with_capacity(ca.len());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"                    // Based off of"},
{"lineNum":"  454","line":"                    // https://github.com/pola-rs/polars/blob/b91cd2d3fa42f80319d23d057fd9691ba474bd61/crates/polars-core/src/chunked_array/iterator/mod.rs#L304"},
{"lineNum":"  455","line":"                    // TBH I don\'t fully understand how this works, but hey, it\'s quickcheck tested!"},
{"lineNum":"  456","line":"                    for arr in ca","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  457","line":"                        .downcast_iter()"},
{"lineNum":"  458","line":"                        .flat_map(|arr| arr.iter().unwrap_required())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  459","line":"                    {"},
{"lineNum":"  460","line":"                        let series = unsafe {"},
{"lineNum":"  461","line":"                            Series::from_chunks_and_dtype_unchecked(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  462","line":"                                \"\","},
{"lineNum":"  463","line":"                                vec![arr],","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  464","line":"                                &ca.inner_dtype(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  465","line":"                            )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  466","line":"                        };","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  467","line":"                        // See comment on similar recursive call in series_new on why allow_nulls=false"},
{"lineNum":"  468","line":"                        buf.push(series_to_boxrooted_ocaml_list(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  469","line":"                            cr, data_type, series, false,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  470","line":"                        )?)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  471","line":"                    }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"                    buf","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  474","line":"                }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  475","line":"            )"},
{"lineNum":"  476","line":"        }"},
{"lineNum":"  477","line":"    }"},
{"lineNum":"  478","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  481","line":"fn rust_series_to_list("},
{"lineNum":"  482","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  483","line":"    data_type: OCamlRef<GADTDataType>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  484","line":"    series: OCamlRef<DynBox<Series>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  485","line":") -> OCaml<DummyBoxRoot> {"},
{"lineNum":"  486","line":"    let data_type: GADTDataType = data_type.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  487","line":"    let Abstract(series) = series.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"    series_to_boxrooted_ocaml_list(cr, &data_type, series, false)?.to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  490","line":"}","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  493","line":"fn rust_series_to_option_list("},
{"lineNum":"  494","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  495","line":"    data_type: OCamlRef<GADTDataType>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  496","line":"    series: OCamlRef<DynBox<Series>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  497","line":") -> OCaml<DummyBoxRoot> {"},
{"lineNum":"  498","line":"    let data_type: GADTDataType = data_type.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  499","line":"    let Abstract(series) = series.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"    series_to_boxrooted_ocaml_list(cr, &data_type, series, true)?.to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  502","line":"}","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"fn series_get(","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  505","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  506","line":"    data_type: &GADTDataType,"},
{"lineNum":"  507","line":"    series: Series,"},
{"lineNum":"  508","line":"    index: usize,"},
{"lineNum":"  509","line":") -> Result<DummyBoxRoot, String> {"},
{"lineNum":"  510","line":"    macro_rules! extract_value {"},
{"lineNum":"  511","line":"        ($rust_type:ty, $ocaml_type:ty, $body:expr) => {{"},
{"lineNum":"  512","line":"            let value: Option<$rust_type> = $body;"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"            let return_value: BoxRoot<Option<$ocaml_type>> = value.to_ocaml(cr).root();"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"            Ok(unsafe { DummyBoxRoot::new(return_value) })"},
{"lineNum":"  517","line":"        }};"},
{"lineNum":"  518","line":"    }"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"    macro_rules! extract_int_value {"},
{"lineNum":"  521","line":"        ($rust_type:ty, $body:expr) => {{"},
{"lineNum":"  522","line":"            extract_value!("},
{"lineNum":"  523","line":"                OCamlIntable<$rust_type>,"},
{"lineNum":"  524","line":"                OCamlInt,"},
{"lineNum":"  525","line":"                $body"},
{"lineNum":"  526","line":"                    .map_err(|err| err.to_string())?","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  527","line":"                    .get(index)"},
{"lineNum":"  528","line":"                    .map(OCamlIntable)"},
{"lineNum":"  529","line":"            )"},
{"lineNum":"  530","line":"        }};"},
{"lineNum":"  531","line":"    }"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"    match data_type {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  534","line":"        GADTDataType::Boolean => extract_value!(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  535","line":"            bool,"},
{"lineNum":"  536","line":"            bool,"},
{"lineNum":"  537","line":"            series.bool().map_err(|err| err.to_string())?.get(index)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  538","line":"        ),"},
{"lineNum":"  539","line":"        GADTDataType::Int8 => extract_int_value!(i8, series.i8()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  540","line":"        GADTDataType::Int16 => extract_int_value!(i16, series.i16()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  541","line":"        GADTDataType::Int32 => extract_int_value!(i32, series.i32()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  542","line":"        GADTDataType::Int64 => extract_int_value!(i64, series.i64()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  543","line":"        GADTDataType::UInt8 => extract_int_value!(u8, series.u8()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  544","line":"        GADTDataType::UInt16 => extract_int_value!(u16, series.u16()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  545","line":"        GADTDataType::UInt32 => extract_int_value!(u32, series.u32()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  546","line":"        GADTDataType::UInt64 => extract_int_value!(u64, series.u64()),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  547","line":"        GADTDataType::Float32 => extract_value!(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  548","line":"            f64,"},
{"lineNum":"  549","line":"            OCamlFloat,"},
{"lineNum":"  550","line":"            series","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  551","line":"                .f32()"},
{"lineNum":"  552","line":"                .map_err(|err| err.to_string())?","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  553","line":"                .get(index)"},
{"lineNum":"  554","line":"                .map(|f32| f32 as f64)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  555","line":"        ),"},
{"lineNum":"  556","line":"        GADTDataType::Float64 => extract_value!(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  557","line":"            f64,"},
{"lineNum":"  558","line":"            OCamlFloat,"},
{"lineNum":"  559","line":"            series.f64().map_err(|err| err.to_string())?.get(index)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  560","line":"        ),"},
{"lineNum":"  561","line":"        GADTDataType::Utf8 => extract_value!(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  562","line":"            &str,"},
{"lineNum":"  563","line":"            String,"},
{"lineNum":"  564","line":"            series.utf8().map_err(|err| err.to_string())?.get(index)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  565","line":"        ),"},
{"lineNum":"  566","line":"        GADTDataType::Binary => extract_value!(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  567","line":"            &[u8],"},
{"lineNum":"  568","line":"            String,"},
{"lineNum":"  569","line":"            series.binary().map_err(|err| err.to_string())?.get(index)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  570","line":"        ),"},
{"lineNum":"  571","line":"        GADTDataType::List(data_type) => extract_value!(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  572","line":"            DummyBoxRoot,"},
{"lineNum":"  573","line":"            DummyBoxRoot,"},
{"lineNum":"  574","line":"            match series.list().map_err(|err| err.to_string())?.get(index) {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  575","line":"                None => Ok(None),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  576","line":"                Some(series) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  577","line":"                    series_to_boxrooted_ocaml_list(cr, data_type, series, false).map(Some)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  578","line":"                }"},
{"lineNum":"  579","line":"            }?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  580","line":"        ),"},
{"lineNum":"  581","line":"    }"},
{"lineNum":"  582","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  585","line":"fn rust_series_get("},
{"lineNum":"  586","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  587","line":"    data_type: OCamlRef<GADTDataType>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  588","line":"    series: OCamlRef<DynBox<Series>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  589","line":"    index: OCamlRef<OCamlInt>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  590","line":") -> OCaml<DummyBoxRoot> {"},
{"lineNum":"  591","line":"    let data_type: GADTDataType = data_type.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  592","line":"    let Abstract(series) = series.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  593","line":"    let index = index.to_rust::<Coerce<_, i64, usize>>(cr).get()?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"    series_get(cr, &data_type, series, index)?.to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  596","line":"}","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"#[ocaml_interop_export]","class":"linePartCov","hits":"6","order":"500","possible_hits":"7",},
{"lineNum":"  599","line":"fn rust_series_name(cr: &mut &mut OCamlRuntime, series: OCamlRef<DynBox<Series>>) -> OCaml<String> {","class":"lineCov","hits":"1","order":"501","possible_hits":"1",},
{"lineNum":"  600","line":"    let Abstract(series) = series.to_rust(cr);","class":"lineCov","hits":"1","order":"502","possible_hits":"1",},
{"lineNum":"  601","line":"    series.name().to_ocaml(cr)","class":"lineCov","hits":"2","order":"503","possible_hits":"2",},
{"lineNum":"  602","line":"}","class":"linePartCov","hits":"1","order":"504","possible_hits":"2",},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"#[ocaml_interop_export]","class":"linePartCov","hits":"7","order":"535","possible_hits":"10",},
{"lineNum":"  605","line":"fn rust_series_rename("},
{"lineNum":"  606","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"536","possible_hits":"1",},
{"lineNum":"  607","line":"    series: OCamlRef<DynBox<Series>>,","class":"lineCov","hits":"1","order":"537","possible_hits":"1",},
{"lineNum":"  608","line":"    name: OCamlRef<String>,","class":"lineCov","hits":"1","order":"538","possible_hits":"1",},
{"lineNum":"  609","line":") -> OCaml<DynBox<Series>> {"},
{"lineNum":"  610","line":"    let Abstract(mut series) = series.to_rust(cr);","class":"lineCov","hits":"1","order":"539","possible_hits":"1",},
{"lineNum":"  611","line":"    let name: String = name.to_rust(cr);","class":"lineCov","hits":"1","order":"540","possible_hits":"1",},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"    let _ = series.rename(&name);","class":"lineCov","hits":"2","order":"541","possible_hits":"2",},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"    OCaml::box_value(cr, series)","class":"lineCov","hits":"1","order":"542","possible_hits":"1",},
{"lineNum":"  616","line":"}","class":"linePartCov","hits":"1","order":"543","possible_hits":"4",},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  619","line":"fn rust_series_dtype("},
{"lineNum":"  620","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  621","line":"    series: OCamlRef<DynBox<Series>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  622","line":") -> OCaml<DataType> {"},
{"lineNum":"  623","line":"    let Abstract(series) = series.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  624","line":"    PolarsDataType(series.dtype().clone()).to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  625","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"#[ocaml_interop_export]","class":"linePartCov","hits":"6","order":"397","possible_hits":"9",},
{"lineNum":"  628","line":"fn rust_series_to_data_frame("},
{"lineNum":"  629","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"398","possible_hits":"1",},
{"lineNum":"  630","line":"    series: OCamlRef<DynBox<Series>>,","class":"lineCov","hits":"1","order":"399","possible_hits":"1",},
{"lineNum":"  631","line":") -> OCaml<DynBox<DataFrame>> {"},
{"lineNum":"  632","line":"    dyn_box!(cr, |series| series.into_frame())","class":"linePartCov","hits":"1","order":"400","possible_hits":"2",},
{"lineNum":"  633","line":"}"},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  636","line":"fn rust_series_sort("},
{"lineNum":"  637","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  638","line":"    series: OCamlRef<DynBox<Series>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  639","line":"    descending: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  640","line":") -> OCaml<DynBox<Series>> {"},
{"lineNum":"  641","line":"    let descending: bool = descending.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"    dyn_box!(cr, |series| series.sort(descending))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  644","line":"}"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  647","line":"fn rust_series_head("},
{"lineNum":"  648","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  649","line":"    series: OCamlRef<DynBox<Series>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  650","line":"    length: OCamlRef<Option<OCamlInt>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  651","line":") -> OCaml<DynBox<Series>> {"},
{"lineNum":"  652","line":"    let length = length","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  653","line":"        .to_rust::<Coerce<_, Option<i64>, Option<usize>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  654","line":"        .get()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"    dyn_box!(cr, |series| series.head(length))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  657","line":"}"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  660","line":"fn rust_series_tail("},
{"lineNum":"  661","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  662","line":"    series: OCamlRef<DynBox<Series>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  663","line":"    length: OCamlRef<Option<OCamlInt>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  664","line":") -> OCaml<DynBox<Series>> {"},
{"lineNum":"  665","line":"    let length = length","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  666","line":"        .to_rust::<Coerce<_, Option<i64>, Option<usize>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  667","line":"        .get()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"    dyn_box!(cr, |series| series.tail(length))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  670","line":"}"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  673","line":"fn rust_series_sample_n("},
{"lineNum":"  674","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  675","line":"    series: OCamlRef<DynBox<Series>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  676","line":"    n: OCamlRef<OCamlInt>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  677","line":"    with_replacement: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  678","line":"    shuffle: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  679","line":"    seed: OCamlRef<Option<OCamlInt>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  680","line":") -> OCaml<Result<DynBox<Series>, String>> {"},
{"lineNum":"  681","line":"    let n = n.to_rust::<Coerce<_, i64, usize>>(cr).get()?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  682","line":"    let with_replacement: bool = with_replacement.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  683","line":"    let shuffle: bool = shuffle.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  684","line":"    let seed = seed","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  685","line":"        .to_rust::<Coerce<_, Option<i64>, Option<u64>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  686","line":"        .get()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"    dyn_box_result!(cr, |series| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  689","line":"        series.sample_n(n, with_replacement, shuffle, seed)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  690","line":"    })"},
{"lineNum":"  691","line":"}"},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  694","line":"fn rust_series_fill_null_with_strategy("},
{"lineNum":"  695","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  696","line":"    series: OCamlRef<DynBox<Series>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  697","line":"    strategy: OCamlRef<FillNullStrategy>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  698","line":") -> OCaml<Result<DynBox<Series>, String>> {"},
{"lineNum":"  699","line":"    let PolarsFillNullStrategy(strategy) = strategy.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"    dyn_box_result!(cr, |series| series.fill_null(strategy))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  702","line":"}"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  705","line":"fn rust_series_interpolate("},
{"lineNum":"  706","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  707","line":"    series: OCamlRef<DynBox<Series>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  708","line":"    method: OCamlRef<InterpolationMethod>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  709","line":") -> OCaml<DynBox<Series>> {"},
{"lineNum":"  710","line":"    let PolarsInterpolationMethod(method) = method.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":"    dyn_box!(cr, |series| interpolate(&series, method))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  713","line":"}"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"macro_rules! series_op {"},
{"lineNum":"  716","line":"    ($name:ident, |$($var:ident),+| $body:expr) => {"},
{"lineNum":"  717","line":"        dyn_box_op!($name, Series, |$($var),+| $body);"},
{"lineNum":"  718","line":"    }"},
{"lineNum":"  719","line":"}"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"macro_rules! series_op_result {"},
{"lineNum":"  722","line":"    ($name:ident, |$($var:ident),+| $body:expr) => {"},
{"lineNum":"  723","line":"        dyn_box_op_result!($name, Series, |$($var),+| $body);"},
{"lineNum":"  724","line":"    }"},
{"lineNum":"  725","line":"}"},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"series_op_result!(rust_series_eq, |series, other| {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  728","line":"    series.equal(&other).map(|series| series.into_series())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  729","line":"});"},
{"lineNum":"  730","line":"series_op_result!(rust_series_neq, |series, other| {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  731","line":"    series.not_equal(&other).map(|series| series.into_series())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  732","line":"});"},
{"lineNum":"  733","line":"series_op_result!(rust_series_gt, |series, other| {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  734","line":"    series.gt(&other).map(|series| series.into_series())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  735","line":"});"},
{"lineNum":"  736","line":"series_op_result!(rust_series_gt_eq, |series, other| {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  737","line":"    series.gt_eq(&other).map(|series| series.into_series())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  738","line":"});"},
{"lineNum":"  739","line":"series_op_result!(rust_series_lt, |series, other| {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  740","line":"    series.lt(&other).map(|series| series.into_series())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  741","line":"});"},
{"lineNum":"  742","line":"series_op_result!(rust_series_lt_eq, |series, other| {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  743","line":"    series.lt_eq(&other).map(|series| series.into_series())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  744","line":"});"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"series_op!(rust_series_add, |series, other| series + other);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  747","line":"series_op!(rust_series_sub, |series, other| series - other);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  748","line":"series_op!(rust_series_mul, |series, other| series * other);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  749","line":"series_op!(rust_series_div, |series, other| series / other);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"#[ocaml_interop_export]","class":"linePartCov","hits":"5","order":"1061","possible_hits":"7",},
{"lineNum":"  752","line":"fn rust_series_to_string_hum("},
{"lineNum":"  753","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  754","line":"    series: OCamlRef<DynBox<Series>>,","class":"lineCov","hits":"1","order":"1062","possible_hits":"1",},
{"lineNum":"  755","line":") -> OCaml<String> {"},
{"lineNum":"  756","line":"    let Abstract(series) = series.to_rust(cr);","class":"lineCov","hits":"1","order":"1063","possible_hits":"1",},
{"lineNum":"  757","line":"    ToString::to_string(&series).to_ocaml(cr)","class":"lineCov","hits":"3","order":"1064","possible_hits":"3",},
{"lineNum":"  758","line":"}","class":"linePartCov","hits":"1","order":"1065","possible_hits":"3",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "inline_test_runner_polars_guide.exe", "date" : "2023-09-17 15:58:31", "instrumented" : 393, "covered" : 104,};
var merged_data = [];
