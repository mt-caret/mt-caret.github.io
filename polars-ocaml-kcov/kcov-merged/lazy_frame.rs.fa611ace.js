var data = {lines:[
{"lineNum":"    1","line":"// TODO: rust_lazy_frame_profile\'s return type is triggering this warning, but"},
{"lineNum":"    2","line":"// due to how I\'ve implemented the proc macro specifying the allow clippy"},
{"lineNum":"    3","line":"// attribute alongside the proc macro invocation doesn\'t work, which probably"},
{"lineNum":"    4","line":"// is fixable; disabling the warning file-wide in the interim."},
{"lineNum":"    5","line":"#![allow(clippy::type_complexity)]"},
{"lineNum":"    6","line":"use crate::utils::*;"},
{"lineNum":"    7","line":"use ocaml_interop::{DynBox, OCaml, OCamlInt, OCamlList, OCamlRef, ToOCaml};"},
{"lineNum":"    8","line":"use polars::prelude::*;"},
{"lineNum":"    9","line":"use polars_ocaml_macros::ocaml_interop_export;"},
{"lineNum":"   10","line":"use smartstring::{LazyCompact, SmartString};"},
{"lineNum":"   11","line":"use std::path::Path;"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#[ocaml_interop_export]","class":"lineCov","hits":"1","order":"691",},
{"lineNum":"   14","line":"fn rust_lazy_frame_scan_csv("},
{"lineNum":"   15","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"   16","line":"    path: OCamlRef<String>,","class":"lineCov","hits":"1","order":"692",},
{"lineNum":"   17","line":") -> OCaml<Result<DynBox<LazyFrame>, String>> {"},
{"lineNum":"   18","line":"    let path: String = path.to_rust(cr);","class":"lineCov","hits":"1","order":"693",},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"    LazyCsvReader::new(path)","class":"lineCov","hits":"1","order":"694",},
{"lineNum":"   21","line":"        .finish()"},
{"lineNum":"   22","line":"        .map(Abstract)"},
{"lineNum":"   23","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0",},
{"lineNum":"   24","line":"        .to_ocaml(cr)","class":"lineCov","hits":"1","order":"695",},
{"lineNum":"   25","line":"}"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"// TODO: properly return error type instead of a string"},
{"lineNum":"   28","line":"#[ocaml_interop_export]","class":"lineCov","hits":"1","order":"1509",},
{"lineNum":"   29","line":"fn rust_lazy_frame_scan_parquet("},
{"lineNum":"   30","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"   31","line":"    path: OCamlRef<String>,","class":"lineCov","hits":"1","order":"1500",},
{"lineNum":"   32","line":") -> OCaml<Result<DynBox<LazyFrame>, String>> {"},
{"lineNum":"   33","line":"    let path: String = path.to_rust(cr);","class":"lineCov","hits":"1","order":"1502",},
{"lineNum":"   34","line":"    let path: &Path = Path::new(&path);","class":"lineCov","hits":"1","order":"1512",},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    LazyFrame::scan_parquet(path, Default::default())","class":"lineCov","hits":"1","order":"1506",},
{"lineNum":"   37","line":"        .map(Abstract)"},
{"lineNum":"   38","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0",},
{"lineNum":"   39","line":"        .to_ocaml(cr)","class":"lineCov","hits":"1","order":"1495",},
{"lineNum":"   40","line":"}","class":"lineCov","hits":"1","order":"1514",},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"// TODO: Polars only has a lazy version of JSON Lines reader (and no lazy version of JSON reader),"},
{"lineNum":"   43","line":"// which I think is mainly because in the case of JSON it loads a single array. If we have a"},
{"lineNum":"   44","line":"// SAX-like parser for JSON, I don\'t see why we can\'t have a lazy JSON reader too."},
{"lineNum":"   45","line":"#[ocaml_interop_export]","class":"lineCov","hits":"1","order":"1497",},
{"lineNum":"   46","line":"fn rust_lazy_frame_scan_jsonl("},
{"lineNum":"   47","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"   48","line":"    path: OCamlRef<String>,","class":"lineCov","hits":"1","order":"1491",},
{"lineNum":"   49","line":") -> OCaml<Result<DynBox<LazyFrame>, String>> {"},
{"lineNum":"   50","line":"    let path: String = path.to_rust(cr);","class":"lineCov","hits":"1","order":"1490",},
{"lineNum":"   51","line":"    let path: &Path = Path::new(&path);","class":"lineCov","hits":"1","order":"1489",},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    LazyJsonLineReader::new(path)","class":"lineCov","hits":"1","order":"1504",},
{"lineNum":"   54","line":"        .finish()"},
{"lineNum":"   55","line":"        .map(Abstract)"},
{"lineNum":"   56","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0",},
{"lineNum":"   57","line":"        .to_ocaml(cr)","class":"lineCov","hits":"1","order":"1508",},
{"lineNum":"   58","line":"}","class":"lineCov","hits":"1","order":"1488",},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0",},
{"lineNum":"   61","line":"fn rust_lazy_frame_explain("},
{"lineNum":"   62","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"   63","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineNoCov","hits":"0",},
{"lineNum":"   64","line":"    optimized: OCamlRef<bool>,","class":"lineNoCov","hits":"0",},
{"lineNum":"   65","line":") -> OCaml<Result<String, String>> {"},
{"lineNum":"   66","line":"    let Abstract(lazy_frame) = lazy_frame.to_rust(cr);","class":"lineNoCov","hits":"0",},
{"lineNum":"   67","line":"    let optimized = optimized.to_rust(cr);","class":"lineNoCov","hits":"0",},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    lazy_frame","class":"lineNoCov","hits":"0",},
{"lineNum":"   70","line":"        .explain(optimized)"},
{"lineNum":"   71","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0",},
{"lineNum":"   72","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0",},
{"lineNum":"   73","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0",},
{"lineNum":"   76","line":"fn rust_lazy_frame_cache("},
{"lineNum":"   77","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0",},
{"lineNum":"   78","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineNoCov","hits":"0",},
{"lineNum":"   79","line":") -> OCaml<DynBox<LazyFrame>> {"},
{"lineNum":"   80","line":"    dyn_box!(cr, |lazy_frame| lazy_frame.cache())","class":"lineNoCov","hits":"0",},
{"lineNum":"   81","line":"}"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0",},
{"lineNum":"   84","line":"fn rust_lazy_frame_to_dot("},
{"lineNum":"   85","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"   86","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineNoCov","hits":"0",},
{"lineNum":"   87","line":"    optimized: OCamlRef<bool>,","class":"lineNoCov","hits":"0",},
{"lineNum":"   88","line":") -> OCaml<Result<String, String>> {"},
{"lineNum":"   89","line":"    let Abstract(lazy_frame) = lazy_frame.to_rust(cr);","class":"lineNoCov","hits":"0",},
{"lineNum":"   90","line":"    let optimized = optimized.to_rust(cr);","class":"lineNoCov","hits":"0",},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    lazy_frame","class":"lineNoCov","hits":"0",},
{"lineNum":"   93","line":"        .to_dot(optimized)"},
{"lineNum":"   94","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0",},
{"lineNum":"   95","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0",},
{"lineNum":"   96","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"#[ocaml_interop_export]","class":"lineCov","hits":"1","order":"331",},
{"lineNum":"   99","line":"fn rust_lazy_frame_collect("},
{"lineNum":"  100","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"332",},
{"lineNum":"  101","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineCov","hits":"1","order":"333",},
{"lineNum":"  102","line":"    streaming: OCamlRef<bool>,","class":"lineCov","hits":"1","order":"334",},
{"lineNum":"  103","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  104","line":"    let streaming = streaming.to_rust(cr);","class":"lineCov","hits":"1","order":"335",},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    dyn_box_result!(cr, |lazy_frame| {","class":"lineCov","hits":"1","order":"336",},
{"lineNum":"  107","line":"        cr.releasing_runtime(|| lazy_frame.with_streaming(streaming).collect())","class":"lineCov","hits":"1","order":"337",},
{"lineNum":"  108","line":"    })"},
{"lineNum":"  109","line":"}"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0",},
{"lineNum":"  112","line":"fn rust_lazy_frame_collect_all("},
{"lineNum":"  113","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  114","line":"    lazy_frames: OCamlRef<OCamlList<DynBox<LazyFrame>>>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  115","line":") -> OCaml<Result<OCamlList<DynBox<DataFrame>>, String>> {"},
{"lineNum":"  116","line":"    let lazy_frames = unwrap_abstract_vec(lazy_frames.to_rust(cr));","class":"lineNoCov","hits":"0",},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    cr.releasing_runtime(|| {","class":"lineNoCov","hits":"0",},
{"lineNum":"  119","line":"        collect_all(lazy_frames)","class":"lineNoCov","hits":"0",},
{"lineNum":"  120","line":"            .map(|data_frames| data_frames.into_iter().map(Abstract).collect::<Vec<_>>())","class":"lineNoCov","hits":"0",},
{"lineNum":"  121","line":"            .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0",},
{"lineNum":"  122","line":"    })","class":"lineNoCov","hits":"0",},
{"lineNum":"  123","line":"    .to_ocaml(cr)","class":"lineNoCov","hits":"0",},
{"lineNum":"  124","line":"}"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"#[ocaml_interop_export]","class":"lineCov","hits":"1","order":"724",},
{"lineNum":"  127","line":"fn rust_lazy_frame_profile("},
{"lineNum":"  128","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"725",},
{"lineNum":"  129","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineCov","hits":"1","order":"726",},
{"lineNum":"  130","line":") -> OCaml<Result<(DynBox<DataFrame>, DynBox<DataFrame>), String>> {"},
{"lineNum":"  131","line":"    let Abstract(lazy_frame) = lazy_frame.to_rust(cr);","class":"lineCov","hits":"1","order":"727",},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    cr.releasing_runtime(|| {","class":"lineCov","hits":"1","order":"728",},
{"lineNum":"  134","line":"        lazy_frame","class":"lineCov","hits":"1","order":"729",},
{"lineNum":"  135","line":"            .profile()"},
{"lineNum":"  136","line":"            .map(|(materialized, profile)| (Abstract(materialized), Abstract(profile)))","class":"lineCov","hits":"1","order":"730",},
{"lineNum":"  137","line":"            .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0",},
{"lineNum":"  138","line":"    })","class":"lineCov","hits":"1","order":"731",},
{"lineNum":"  139","line":"    .to_ocaml(cr)","class":"lineCov","hits":"1","order":"732",},
{"lineNum":"  140","line":"}","class":"lineCov","hits":"1","order":"733",},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineCov","hits":"1","order":"696",},
{"lineNum":"  143","line":"fn rust_lazy_frame_fetch("},
{"lineNum":"  144","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"697",},
{"lineNum":"  145","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineCov","hits":"1","order":"698",},
{"lineNum":"  146","line":"    n_rows: OCamlRef<OCamlInt>,","class":"lineCov","hits":"1","order":"699",},
{"lineNum":"  147","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  148","line":"    let n_rows = n_rows.to_rust::<Coerce<_, i64, usize>>(cr).get()?;","class":"lineCov","hits":"1","order":"700",},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"    dyn_box_result!(cr, |lazy_frame| {","class":"lineCov","hits":"1","order":"701",},
{"lineNum":"  151","line":"        cr.releasing_runtime(|| lazy_frame.fetch(n_rows))","class":"lineCov","hits":"1","order":"702",},
{"lineNum":"  152","line":"    })"},
{"lineNum":"  153","line":"}"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"#[ocaml_interop_export]","class":"lineCov","hits":"1","order":"437",},
{"lineNum":"  156","line":"fn rust_lazy_frame_filter("},
{"lineNum":"  157","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"438",},
{"lineNum":"  158","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineCov","hits":"1","order":"439",},
{"lineNum":"  159","line":"    expr: OCamlRef<DynBox<Expr>>,","class":"lineCov","hits":"1","order":"440",},
{"lineNum":"  160","line":") -> OCaml<DynBox<LazyFrame>> {"},
{"lineNum":"  161","line":"    dyn_box!(cr, |lazy_frame, expr| lazy_frame.filter(expr))","class":"lineCov","hits":"1","order":"441",},
{"lineNum":"  162","line":"}"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"#[ocaml_interop_export]","class":"lineCov","hits":"1","order":"324",},
{"lineNum":"  165","line":"fn rust_lazy_frame_select("},
{"lineNum":"  166","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"325",},
{"lineNum":"  167","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineCov","hits":"1","order":"326",},
{"lineNum":"  168","line":"    exprs: OCamlRef<OCamlList<DynBox<Expr>>>,","class":"lineCov","hits":"1","order":"327",},
{"lineNum":"  169","line":") -> OCaml<DynBox<LazyFrame>> {"},
{"lineNum":"  170","line":"    let exprs = unwrap_abstract_vec(exprs.to_rust(cr));","class":"lineCov","hits":"1","order":"328",},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    dyn_box!(cr, |lazy_frame| lazy_frame.select(&exprs))","class":"lineCov","hits":"1","order":"329",},
{"lineNum":"  173","line":"}","class":"lineCov","hits":"1","order":"330",},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"#[ocaml_interop_export]","class":"lineCov","hits":"1","order":"340",},
{"lineNum":"  176","line":"fn rust_lazy_frame_with_columns("},
{"lineNum":"  177","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"341",},
{"lineNum":"  178","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineCov","hits":"1","order":"342",},
{"lineNum":"  179","line":"    exprs: OCamlRef<OCamlList<DynBox<Expr>>>,","class":"lineCov","hits":"1","order":"343",},
{"lineNum":"  180","line":") -> OCaml<DynBox<LazyFrame>> {"},
{"lineNum":"  181","line":"    let exprs = unwrap_abstract_vec(exprs.to_rust(cr));","class":"lineCov","hits":"1","order":"344",},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"    dyn_box!(cr, |lazy_frame| lazy_frame.with_columns(&exprs))","class":"lineCov","hits":"1","order":"345",},
{"lineNum":"  184","line":"}","class":"lineCov","hits":"1","order":"346",},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"#[ocaml_interop_export]","class":"lineCov","hits":"1","order":"1483",},
{"lineNum":"  187","line":"fn rust_lazy_frame_groupby("},
{"lineNum":"  188","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"1482",},
{"lineNum":"  189","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineCov","hits":"1","order":"1481",},
{"lineNum":"  190","line":"    is_stable: OCamlRef<bool>,","class":"lineCov","hits":"1","order":"1511",},
{"lineNum":"  191","line":"    by: OCamlRef<OCamlList<DynBox<Expr>>>,","class":"lineCov","hits":"1","order":"1487",},
{"lineNum":"  192","line":"    agg: OCamlRef<OCamlList<DynBox<Expr>>>,","class":"lineCov","hits":"1","order":"1480",},
{"lineNum":"  193","line":") -> OCaml<DynBox<LazyFrame>> {"},
{"lineNum":"  194","line":"    let is_stable = is_stable.to_rust(cr);","class":"lineCov","hits":"1","order":"1492",},
{"lineNum":"  195","line":"    let by = unwrap_abstract_vec(by.to_rust(cr));","class":"lineCov","hits":"1","order":"1479",},
{"lineNum":"  196","line":"    let agg = unwrap_abstract_vec(agg.to_rust(cr));","class":"lineCov","hits":"1","order":"1513",},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    dyn_box!(cr, |lazy_frame| {","class":"lineCov","hits":"1","order":"1515",},
{"lineNum":"  199","line":"        let groupby = if is_stable {","class":"lineCov","hits":"1","order":"1494",},
{"lineNum":"  200","line":"            lazy_frame.groupby_stable(by)","class":"lineCov","hits":"1","order":"1486",},
{"lineNum":"  201","line":"        } else {"},
{"lineNum":"  202","line":"            lazy_frame.groupby(by)","class":"lineNoCov","hits":"0",},
{"lineNum":"  203","line":"        };"},
{"lineNum":"  204","line":"        groupby.agg(agg)","class":"lineCov","hits":"1","order":"1499",},
{"lineNum":"  205","line":"    })"},
{"lineNum":"  206","line":"}","class":"lineCov","hits":"1","order":"1478",},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"#[ocaml_interop_export]","class":"lineCov","hits":"1","order":"1477",},
{"lineNum":"  209","line":"fn rust_lazy_frame_groupby_dynamic("},
{"lineNum":"  210","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"1505",},
{"lineNum":"  211","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineCov","hits":"1","order":"1476",},
{"lineNum":"  212","line":"    index_column: OCamlRef<DynBox<Expr>>,","class":"lineCov","hits":"1","order":"1475",},
{"lineNum":"  213","line":"    by: OCamlRef<OCamlList<DynBox<Expr>>>,","class":"lineCov","hits":"1","order":"1516",},
{"lineNum":"  214","line":"    every: OCamlRef<Option<String>>,","class":"lineCov","hits":"1","order":"1510",},
{"lineNum":"  215","line":"    period: OCamlRef<Option<String>>,","class":"lineCov","hits":"1","order":"1474",},
{"lineNum":"  216","line":"    offset: OCamlRef<Option<String>>,","class":"lineCov","hits":"1","order":"1517",},
{"lineNum":"  217","line":"    truncate: OCamlRef<Option<bool>>,","class":"lineCov","hits":"1","order":"1501",},
{"lineNum":"  218","line":"    include_boundaries: OCamlRef<Option<bool>>,","class":"lineCov","hits":"1","order":"1473",},
{"lineNum":"  219","line":"    closed_window: OCamlRef<Option<ClosedWindow>>,","class":"lineCov","hits":"1","order":"1503",},
{"lineNum":"  220","line":"    start_by: OCamlRef<Option<StartBy>>,","class":"lineCov","hits":"1","order":"1472",},
{"lineNum":"  221","line":"    check_sorted: OCamlRef<Option<bool>>,","class":"lineCov","hits":"1","order":"1518",},
{"lineNum":"  222","line":"    agg: OCamlRef<OCamlList<DynBox<Expr>>>,","class":"lineCov","hits":"1","order":"1507",},
{"lineNum":"  223","line":") -> OCaml<DynBox<LazyFrame>> {"},
{"lineNum":"  224","line":"    let every = every","class":"lineCov","hits":"1","order":"1519",},
{"lineNum":"  225","line":"        .to_rust::<Option<String>>(cr)","class":"lineCov","hits":"1","order":"1496",},
{"lineNum":"  226","line":"        .as_deref()"},
{"lineNum":"  227","line":"        .map(Duration::parse);","class":"lineCov","hits":"1","order":"1520",},
{"lineNum":"  228","line":"    let period = period","class":"lineCov","hits":"1","order":"1522",},
{"lineNum":"  229","line":"        .to_rust::<Option<String>>(cr)","class":"lineCov","hits":"1","order":"1521",},
{"lineNum":"  230","line":"        .as_deref()"},
{"lineNum":"  231","line":"        .map(Duration::parse);","class":"lineCov","hits":"1","order":"1523",},
{"lineNum":"  232","line":"    let offset = offset","class":"lineCov","hits":"1","order":"1525",},
{"lineNum":"  233","line":"        .to_rust::<Option<String>>(cr)","class":"lineCov","hits":"1","order":"1524",},
{"lineNum":"  234","line":"        .as_deref()"},
{"lineNum":"  235","line":"        .map(Duration::parse);","class":"lineCov","hits":"1","order":"1526",},
{"lineNum":"  236","line":"    let truncate: Option<bool> = truncate.to_rust(cr);","class":"lineCov","hits":"1","order":"1527",},
{"lineNum":"  237","line":"    let include_boundaries: Option<bool> = include_boundaries.to_rust(cr);","class":"lineCov","hits":"1","order":"1528",},
{"lineNum":"  238","line":"    let closed_window = closed_window","class":"lineCov","hits":"1","order":"1530",},
{"lineNum":"  239","line":"        .to_rust::<Option<PolarsClosedWindow>>(cr)","class":"lineCov","hits":"1","order":"1529",},
{"lineNum":"  240","line":"        .map(|PolarsClosedWindow(closed_window)| closed_window);","class":"lineCov","hits":"1","order":"1552",},
{"lineNum":"  241","line":"    let start_by = start_by","class":"lineCov","hits":"1","order":"1532",},
{"lineNum":"  242","line":"        .to_rust::<Option<PolarsStartBy>>(cr)","class":"lineCov","hits":"1","order":"1531",},
{"lineNum":"  243","line":"        .map(|PolarsStartBy(start_by)| start_by);","class":"lineNoCov","hits":"0",},
{"lineNum":"  244","line":"    let check_sorted: Option<bool> = check_sorted.to_rust(cr);","class":"lineCov","hits":"1","order":"1533",},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"    let options: DynamicGroupOptions = Default::default();","class":"lineCov","hits":"1","order":"1534",},
{"lineNum":"  247","line":"    let options = DynamicGroupOptions {","class":"lineCov","hits":"1","order":"1545",},
{"lineNum":"  248","line":"        // index_column is set within LazyFrame::groupby_dynamic()"},
{"lineNum":"  249","line":"        index_column: \"\".into(),","class":"lineCov","hits":"1","order":"1535",},
{"lineNum":"  250","line":"        every: every.unwrap_or(options.every),","class":"lineCov","hits":"1","order":"1537",},
{"lineNum":"  251","line":"        period: period.unwrap_or(options.period),","class":"lineCov","hits":"1","order":"1538",},
{"lineNum":"  252","line":"        offset: offset.unwrap_or(options.offset),","class":"lineCov","hits":"1","order":"1539",},
{"lineNum":"  253","line":"        truncate: truncate.unwrap_or(options.truncate),","class":"lineCov","hits":"1","order":"1540",},
{"lineNum":"  254","line":"        include_boundaries: include_boundaries.unwrap_or(options.include_boundaries),","class":"lineCov","hits":"1","order":"1541",},
{"lineNum":"  255","line":"        closed_window: closed_window.unwrap_or(options.closed_window),","class":"lineCov","hits":"1","order":"1542",},
{"lineNum":"  256","line":"        start_by: start_by.unwrap_or(options.start_by),","class":"lineCov","hits":"1","order":"1543",},
{"lineNum":"  257","line":"        check_sorted: check_sorted.unwrap_or(options.check_sorted),","class":"lineCov","hits":"1","order":"1544",},
{"lineNum":"  258","line":"    };","class":"lineNoCov","hits":"0",},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"    let by = unwrap_abstract_vec(by.to_rust(cr));","class":"lineCov","hits":"1","order":"1546",},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"    let agg = unwrap_abstract_vec(agg.to_rust(cr));","class":"lineCov","hits":"1","order":"1547",},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"    dyn_box!(cr, |lazy_frame, index_column| {","class":"lineCov","hits":"1","order":"1548",},
{"lineNum":"  265","line":"        lazy_frame","class":"lineCov","hits":"1","order":"1549",},
{"lineNum":"  266","line":"            .groupby_dynamic(index_column, by, options)","class":"lineCov","hits":"1","order":"1550",},
{"lineNum":"  267","line":"            .agg(agg)","class":"lineCov","hits":"1","order":"1551",},
{"lineNum":"  268","line":"    })"},
{"lineNum":"  269","line":"}","class":"lineCov","hits":"1","order":"1536",},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"#[ocaml_interop_export]","class":"lineCov","hits":"1","order":"398",},
{"lineNum":"  272","line":"fn rust_lazy_frame_join("},
{"lineNum":"  273","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"399",},
{"lineNum":"  274","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineCov","hits":"1","order":"400",},
{"lineNum":"  275","line":"    other: OCamlRef<DynBox<LazyFrame>>,","class":"lineCov","hits":"1","order":"401",},
{"lineNum":"  276","line":"    left_on: OCamlRef<OCamlList<DynBox<Expr>>>,","class":"lineCov","hits":"1","order":"402",},
{"lineNum":"  277","line":"    right_on: OCamlRef<OCamlList<DynBox<Expr>>>,","class":"lineCov","hits":"1","order":"403",},
{"lineNum":"  278","line":"    how: OCamlRef<JoinType>,","class":"lineCov","hits":"1","order":"404",},
{"lineNum":"  279","line":") -> OCaml<DynBox<LazyFrame>> {"},
{"lineNum":"  280","line":"    let left_on = unwrap_abstract_vec(left_on.to_rust(cr));","class":"lineCov","hits":"1","order":"405",},
{"lineNum":"  281","line":"    let right_on = unwrap_abstract_vec(right_on.to_rust(cr));","class":"lineCov","hits":"1","order":"406",},
{"lineNum":"  282","line":"    let PolarsJoinType(how) = how.to_rust(cr);","class":"lineCov","hits":"1","order":"407",},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"    dyn_box!(cr, |lazy_frame, other| {","class":"lineCov","hits":"1","order":"427",},
{"lineNum":"  285","line":"        lazy_frame.join(other, &left_on, &right_on, JoinArgs::new(how))","class":"lineCov","hits":"1","order":"428",},
{"lineNum":"  286","line":"    })"},
{"lineNum":"  287","line":"}","class":"lineCov","hits":"1","order":"429",},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"#[ocaml_interop_export]","class":"lineCov","hits":"1","order":"703",},
{"lineNum":"  290","line":"fn rust_lazy_frame_sort("},
{"lineNum":"  291","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"704",},
{"lineNum":"  292","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineCov","hits":"1","order":"705",},
{"lineNum":"  293","line":"    by_column: OCamlRef<String>,","class":"lineCov","hits":"1","order":"706",},
{"lineNum":"  294","line":"    descending: OCamlRef<Option<bool>>,","class":"lineCov","hits":"1","order":"707",},
{"lineNum":"  295","line":"    nulls_last: OCamlRef<Option<bool>>,","class":"lineCov","hits":"1","order":"708",},
{"lineNum":"  296","line":"    multithreaded: OCamlRef<Option<bool>>,","class":"lineCov","hits":"1","order":"709",},
{"lineNum":"  297","line":"    maintain_order: OCamlRef<Option<bool>>,","class":"lineCov","hits":"1","order":"710",},
{"lineNum":"  298","line":") -> OCaml<DynBox<LazyFrame>> {"},
{"lineNum":"  299","line":"    let by_column: String = by_column.to_rust(cr);","class":"lineCov","hits":"1","order":"711",},
{"lineNum":"  300","line":"    let descending: Option<bool> = descending.to_rust(cr);","class":"lineCov","hits":"1","order":"712",},
{"lineNum":"  301","line":"    let nulls_last: Option<bool> = nulls_last.to_rust(cr);","class":"lineCov","hits":"1","order":"713",},
{"lineNum":"  302","line":"    let multithreaded: Option<bool> = multithreaded.to_rust(cr);","class":"lineCov","hits":"1","order":"714",},
{"lineNum":"  303","line":"    let maintain_order: Option<bool> = maintain_order.to_rust(cr);","class":"lineCov","hits":"1","order":"715",},
{"lineNum":"  304","line":"    let sort_options: SortOptions = Default::default();","class":"lineCov","hits":"1","order":"716",},
{"lineNum":"  305","line":"    let sort_options = SortOptions {","class":"lineCov","hits":"1","order":"721",},
{"lineNum":"  306","line":"        descending: descending.unwrap_or(sort_options.descending),","class":"lineCov","hits":"1","order":"717",},
{"lineNum":"  307","line":"        nulls_last: nulls_last.unwrap_or(sort_options.nulls_last),","class":"lineCov","hits":"1","order":"718",},
{"lineNum":"  308","line":"        multithreaded: multithreaded.unwrap_or(sort_options.multithreaded),","class":"lineCov","hits":"1","order":"719",},
{"lineNum":"  309","line":"        maintain_order: maintain_order.unwrap_or(sort_options.maintain_order),","class":"lineCov","hits":"1","order":"720",},
{"lineNum":"  310","line":"    };"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"    dyn_box!(cr, |lazy_frame| lazy_frame.sort(&by_column, sort_options))","class":"lineCov","hits":"1","order":"722",},
{"lineNum":"  313","line":"}","class":"lineCov","hits":"1","order":"723",},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0",},
{"lineNum":"  316","line":"fn rust_lazy_frame_vertical_concat("},
{"lineNum":"  317","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  318","line":"    lazy_frames: OCamlRef<OCamlList<DynBox<LazyFrame>>>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  319","line":"    rechunk: OCamlRef<bool>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  320","line":"    parallel: OCamlRef<bool>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  321","line":"    to_supertypes: OCamlRef<bool>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  322","line":") -> OCaml<Result<DynBox<LazyFrame>, String>> {"},
{"lineNum":"  323","line":"    let lazy_frames = unwrap_abstract_vec(lazy_frames.to_rust(cr));","class":"lineNoCov","hits":"0",},
{"lineNum":"  324","line":"    let rechunk = rechunk.to_rust(cr);","class":"lineNoCov","hits":"0",},
{"lineNum":"  325","line":"    let parallel = parallel.to_rust(cr);","class":"lineNoCov","hits":"0",},
{"lineNum":"  326","line":"    let to_supertypes = to_supertypes.to_rust(cr);","class":"lineNoCov","hits":"0",},
{"lineNum":"  327","line":"    concat(","class":"lineNoCov","hits":"0",},
{"lineNum":"  328","line":"        &lazy_frames,"},
{"lineNum":"  329","line":"        UnionArgs {","class":"lineNoCov","hits":"0",},
{"lineNum":"  330","line":"            rechunk,"},
{"lineNum":"  331","line":"            parallel,"},
{"lineNum":"  332","line":"            to_supertypes,"},
{"lineNum":"  333","line":"        },"},
{"lineNum":"  334","line":"    )"},
{"lineNum":"  335","line":"    .map(Abstract)"},
{"lineNum":"  336","line":"    .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0",},
{"lineNum":"  337","line":"    .to_ocaml(cr)","class":"lineNoCov","hits":"0",},
{"lineNum":"  338","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0",},
{"lineNum":"  341","line":"fn rust_lazy_frame_diagonal_concat("},
{"lineNum":"  342","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  343","line":"    lazy_frames: OCamlRef<OCamlList<DynBox<LazyFrame>>>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  344","line":"    rechunk: OCamlRef<bool>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  345","line":"    parallel: OCamlRef<bool>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  346","line":") -> OCaml<Result<DynBox<LazyFrame>, String>> {"},
{"lineNum":"  347","line":"    let lazy_frames = unwrap_abstract_vec(lazy_frames.to_rust(cr));","class":"lineNoCov","hits":"0",},
{"lineNum":"  348","line":"    let rechunk = rechunk.to_rust(cr);","class":"lineNoCov","hits":"0",},
{"lineNum":"  349","line":"    let parallel = parallel.to_rust(cr);","class":"lineNoCov","hits":"0",},
{"lineNum":"  350","line":"    diag_concat_lf(&lazy_frames, rechunk, parallel)","class":"lineNoCov","hits":"0",},
{"lineNum":"  351","line":"        .map(Abstract)"},
{"lineNum":"  352","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0",},
{"lineNum":"  353","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0",},
{"lineNum":"  354","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0",},
{"lineNum":"  357","line":"fn rust_lazy_frame_melt("},
{"lineNum":"  358","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0",},
{"lineNum":"  359","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  360","line":"    id_vars: OCamlRef<OCamlList<String>>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  361","line":"    value_vars: OCamlRef<OCamlList<String>>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  362","line":"    variable_name: OCamlRef<Option<String>>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  363","line":"    value_name: OCamlRef<Option<String>>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  364","line":"    streamable: OCamlRef<bool>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  365","line":") -> OCaml<DynBox<LazyFrame>> {"},
{"lineNum":"  366","line":"    let id_vars: Vec<SmartString<LazyCompact>> = id_vars","class":"lineNoCov","hits":"0",},
{"lineNum":"  367","line":"        .to_rust::<Vec<String>>(cr)","class":"lineNoCov","hits":"0",},
{"lineNum":"  368","line":"        .into_iter()"},
{"lineNum":"  369","line":"        .map(|s| s.into())","class":"lineNoCov","hits":"0",},
{"lineNum":"  370","line":"        .collect();","class":"lineNoCov","hits":"0",},
{"lineNum":"  371","line":"    let value_vars: Vec<SmartString<LazyCompact>> = value_vars","class":"lineNoCov","hits":"0",},
{"lineNum":"  372","line":"        .to_rust::<Vec<String>>(cr)","class":"lineNoCov","hits":"0",},
{"lineNum":"  373","line":"        .into_iter()"},
{"lineNum":"  374","line":"        .map(|s| s.into())","class":"lineNoCov","hits":"0",},
{"lineNum":"  375","line":"        .collect();","class":"lineNoCov","hits":"0",},
{"lineNum":"  376","line":"    let variable_name: Option<SmartString<LazyCompact>> = variable_name","class":"lineNoCov","hits":"0",},
{"lineNum":"  377","line":"        .to_rust::<Option<String>>(cr)","class":"lineNoCov","hits":"0",},
{"lineNum":"  378","line":"        .map(|s| s.into());","class":"lineNoCov","hits":"0",},
{"lineNum":"  379","line":"    let value_name: Option<SmartString<LazyCompact>> ="},
{"lineNum":"  380","line":"        value_name.to_rust::<Option<String>>(cr).map(|s| s.into());","class":"lineNoCov","hits":"0",},
{"lineNum":"  381","line":"    let streamable: bool = streamable.to_rust(cr);","class":"lineNoCov","hits":"0",},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    let melt_args = MeltArgs {","class":"lineNoCov","hits":"0",},
{"lineNum":"  384","line":"        id_vars,","class":"lineNoCov","hits":"0",},
{"lineNum":"  385","line":"        value_vars,","class":"lineNoCov","hits":"0",},
{"lineNum":"  386","line":"        variable_name,","class":"lineNoCov","hits":"0",},
{"lineNum":"  387","line":"        value_name,","class":"lineNoCov","hits":"0",},
{"lineNum":"  388","line":"        streamable,"},
{"lineNum":"  389","line":"    };"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"    dyn_box!(cr, |lazy_frame| lazy_frame.melt(melt_args))","class":"lineNoCov","hits":"0",},
{"lineNum":"  392","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineCov","hits":"1","order":"1484",},
{"lineNum":"  395","line":"fn rust_lazy_frame_limit("},
{"lineNum":"  396","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"1485",},
{"lineNum":"  397","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineCov","hits":"1","order":"1493",},
{"lineNum":"  398","line":"    n: OCamlRef<OCamlInt>,","class":"lineCov","hits":"1","order":"1553",},
{"lineNum":"  399","line":") -> OCaml<DynBox<LazyFrame>> {"},
{"lineNum":"  400","line":"    let n = n.to_rust::<Coerce<_, i64, u32>>(cr).get()?;","class":"lineCov","hits":"1","order":"1554",},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"    dyn_box!(cr, |lazy_frame| lazy_frame.limit(n))","class":"lineCov","hits":"1","order":"1498",},
{"lineNum":"  403","line":"}"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0",},
{"lineNum":"  406","line":"fn rust_lazy_frame_explode("},
{"lineNum":"  407","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0",},
{"lineNum":"  408","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  409","line":"    columns: OCamlRef<OCamlList<DynBox<Expr>>>,","class":"lineNoCov","hits":"0",},
{"lineNum":"  410","line":") -> OCaml<DynBox<LazyFrame>> {"},
{"lineNum":"  411","line":"    let columns = unwrap_abstract_vec(columns.to_rust(cr));","class":"lineNoCov","hits":"0",},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"    dyn_box!(cr, |lazy_frame| lazy_frame.explode(&columns))","class":"lineNoCov","hits":"0",},
{"lineNum":"  414","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"#[ocaml_interop_export]","class":"lineCov","hits":"1","order":"1471",},
{"lineNum":"  417","line":"fn rust_lazy_frame_with_streaming("},
{"lineNum":"  418","line":"    cr: &mut &mut OCamlRuntime,","class":"lineCov","hits":"1","order":"1470",},
{"lineNum":"  419","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineCov","hits":"1","order":"1469",},
{"lineNum":"  420","line":"    toggle: OCamlRef<bool>,","class":"lineCov","hits":"1","order":"1468",},
{"lineNum":"  421","line":") -> OCaml<DynBox<LazyFrame>> {"},
{"lineNum":"  422","line":"    let toggle = toggle.to_rust(cr);","class":"lineCov","hits":"1","order":"1467",},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"    dyn_box!(cr, |lazy_frame| lazy_frame.with_streaming(toggle))","class":"lineCov","hits":"1","order":"1466",},
{"lineNum":"  425","line":"}"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"#[ocaml_interop_export]","class":"lineCov","hits":"1","order":"1465",},
{"lineNum":"  428","line":"fn rust_lazy_frame_schema("},
{"lineNum":"  429","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  430","line":"    lazy_frame: OCamlRef<DynBox<LazyFrame>>,","class":"lineCov","hits":"1","order":"1464",},
{"lineNum":"  431","line":") -> OCaml<Result<DynBox<Schema>, String>> {"},
{"lineNum":"  432","line":"    dyn_box_result!(cr, |lazy_frame| {","class":"lineCov","hits":"1","order":"1463",},
{"lineNum":"  433","line":"        lazy_frame.schema().map(|schema| (*schema).clone())","class":"lineCov","hits":"1","order":"1462",},
{"lineNum":"  434","line":"    })"},
{"lineNum":"  435","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "inline_test_runner_polars_tests.exe", "date" : "2023-09-17 15:58:55", "instrumented" : 273, "covered" : 175,};
var merged_data = [];
