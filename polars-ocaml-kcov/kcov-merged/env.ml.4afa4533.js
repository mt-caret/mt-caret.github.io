var data = {lines:[
{"lineNum":"    1","line":"open! Core","class":"lineCov","hits":"1","order":"6",},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"module Table_formatting = struct","class":"lineCov","hits":"1","order":"4",},
{"lineNum":"    4","line":"  type t =","class":"lineCov","hits":"1","order":"13",},
{"lineNum":"    5","line":"    | Ascii_full","class":"lineCov","hits":"1","order":"15",},
{"lineNum":"    6","line":"    | Ascii_full_condensed"},
{"lineNum":"    7","line":"    | Ascii_no_borders"},
{"lineNum":"    8","line":"    | Ascii_borders_only"},
{"lineNum":"    9","line":"    | Ascii_borders_only_condensed"},
{"lineNum":"   10","line":"    | Ascii_horizontal_only"},
{"lineNum":"   11","line":"    | Ascii_markdown"},
{"lineNum":"   12","line":"    | Utf8_full"},
{"lineNum":"   13","line":"    | Utf8_full_condensed"},
{"lineNum":"   14","line":"    | Utf8_no_borders"},
{"lineNum":"   15","line":"    | Utf8_borders_only"},
{"lineNum":"   16","line":"    | Utf8_horizontal_only"},
{"lineNum":"   17","line":"    | Nothing"},
{"lineNum":"   18","line":"  [@@deriving variants, enumerate]"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"  let to_string t = Variants.to_name t |> String.uppercase","class":"lineCov","hits":"1","order":"17",},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"  let of_string ="},
{"lineNum":"   23","line":"    let variants = List.map all ~f:(fun t -> to_string t, t) in","class":"lineCov","hits":"1","order":"29",},
{"lineNum":"   24","line":"    fun s -> List.find_exn variants ~f:(fun (name, _) -> String.equal name s) |> snd","class":"lineCov","hits":"1","order":"20",},
{"lineNum":"   25","line":"  ;;"},
{"lineNum":"   26","line":"end"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"type t =","class":"lineCov","hits":"1","order":"23",},
{"lineNum":"   29","line":"  { fmt_table_formatting : Table_formatting.t"},
{"lineNum":"   30","line":"  ; table_width : int"},
{"lineNum":"   31","line":"  }"},
{"lineNum":"   32","line":"[@@deriving typed_fields]"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"module Info = struct","class":"lineCov","hits":"1","order":"14",},
{"lineNum":"   35","line":"  type \'a t =","class":"lineCov","hits":"1","order":"24",},
{"lineNum":"   36","line":"    { env_var : string","class":"lineCov","hits":"1","order":"18",},
{"lineNum":"   37","line":"    ; of_string : string -> \'a","class":"lineCov","hits":"1","order":"22",},
{"lineNum":"   38","line":"    ; to_string : \'a -> string","class":"lineCov","hits":"1","order":"26",},
{"lineNum":"   39","line":"    ; default : \'a","class":"lineCov","hits":"1","order":"28",},
{"lineNum":"   40","line":"    }"},
{"lineNum":"   41","line":"  [@@deriving fields]"},
{"lineNum":"   42","line":"end"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"let info : type a. a Typed_field.t -> a Info.t = function","class":"lineCov","hits":"1","order":"16",},
{"lineNum":"   45","line":"  | Fmt_table_formatting ->"},
{"lineNum":"   46","line":"    { env_var = \"POLARS_FMT_TABLE_FORMATTING\"","class":"lineCov","hits":"1","order":"10",},
{"lineNum":"   47","line":"    ; of_string = Table_formatting.of_string","class":"lineCov","hits":"1","order":"9",},
{"lineNum":"   48","line":"    ; to_string = Table_formatting.to_string","class":"lineCov","hits":"1","order":"8",},
{"lineNum":"   49","line":"    ; default = Utf8_full_condensed"},
{"lineNum":"   50","line":"    }"},
{"lineNum":"   51","line":"  | Table_width ->"},
{"lineNum":"   52","line":"    { env_var = \"POLARS_TABLE_WIDTH\"","class":"lineCov","hits":"1","order":"30",},
{"lineNum":"   53","line":"    ; of_string = Int.of_string","class":"lineCov","hits":"1","order":"19",},
{"lineNum":"   54","line":"    ; to_string = Int.to_string","class":"lineCov","hits":"1","order":"11",},
{"lineNum":"   55","line":"    ; default = 100"},
{"lineNum":"   56","line":"    }"},
{"lineNum":"   57","line":";;"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"let set : type a. ?value:a -> a Typed_field.t -> unit =","class":"lineCov","hits":"1","order":"7",},
{"lineNum":"   60","line":"  fun ?value field ->"},
{"lineNum":"   61","line":"  let { Info.env_var; of_string = _; to_string; default } = info field in","class":"lineCov","hits":"1","order":"5",},
{"lineNum":"   62","line":"  Core_unix.putenv ~key:env_var ~data:(to_string (Option.value value ~default))","class":"lineCov","hits":"1","order":"12",},
{"lineNum":"   63","line":";;"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"let () ="},
{"lineNum":"   66","line":"  List.iter Typed_field.Packed.all ~f:(fun { f = T field } ->","class":"lineCov","hits":"1","order":"21",},
{"lineNum":"   67","line":"    let env_var = info field |> Info.env_var in","class":"lineCov","hits":"1","order":"25",},
{"lineNum":"   68","line":"    if Option.is_none (Sys.getenv env_var) then set field)","class":"lineCov","hits":"1","order":"27",},
{"lineNum":"   69","line":";;"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "", "date" : "2023-09-23 10:46:05", "instrumented" : 27, "covered" : 27,};
var merged_data = [];
