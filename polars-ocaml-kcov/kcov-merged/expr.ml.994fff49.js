var data = {lines:[
{"lineNum":"    1","line":"open! Core","class":"lineCov","hits":"1","order":"124",},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"module T = struct","class":"lineCov","hits":"1","order":"114",},
{"lineNum":"    4","line":"  type t"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"  external col : string -> t = \"rust_expr_col\""},
{"lineNum":"    7","line":"  external cols : string list -> t = \"rust_expr_cols\""},
{"lineNum":"    8","line":"  external all : unit -> t = \"rust_expr_all\""},
{"lineNum":"    9","line":"  external exclude : t -> names:string list -> t = \"rust_expr_exclude\""},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"  let element () = col \"\"","class":"lineCov","hits":"1","order":"1010",},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"  external cast : t -> to_:Data_type.t -> strict:bool -> t = \"rust_expr_cast\""},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"  let cast ?(strict = true) t ~to_ = cast t ~to_ ~strict","class":"lineCov","hits":"1","order":"1008",},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"  external lit : \'a Data_type.Typed.t -> \'a -> t = \"rust_expr_lit\""},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"  let lit (type a) (data_type : a Data_type.Typed.t) value =","class":"lineCov","hits":"1","order":"1017",},
{"lineNum":"   20","line":"    match Data_type.Typed.flatten_custom data_type with","class":"lineCov","hits":"1","order":"1016",},
{"lineNum":"   21","line":"    | Custom { data_type; f = _; f_inverse } -> lit data_type (f_inverse value)","class":"lineCov","hits":"1","order":"1771",},
{"lineNum":"   22","line":"    | data_type -> lit data_type value","class":"lineCov","hits":"1","order":"1015",},
{"lineNum":"   23","line":"  ;;"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"  external null : unit -> t = \"rust_expr_null\""},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"  let int = lit Int64","class":"lineCov","hits":"1","order":"121",},
{"lineNum":"   28","line":"  let float = lit Float64","class":"lineCov","hits":"1","order":"123",},
{"lineNum":"   29","line":"  let bool = lit Boolean","class":"lineCov","hits":"1","order":"119",},
{"lineNum":"   30","line":"  let string = lit Utf8","class":"lineCov","hits":"1","order":"118",},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"  external naive_date : Common.Naive_date.t -> t = \"rust_expr_naive_date\""},
{"lineNum":"   33","line":"  external naive_datetime : Common.Naive_datetime.t -> t = \"rust_expr_naive_datetime\""},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"  let time time = naive_datetime (Common.Naive_datetime.of_time_ns_exn time)","class":"lineNoCov","hits":"0",},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"  external series : Series.t -> t = \"rust_expr_series\""},
{"lineNum":"   38","line":"  external sort : t -> descending:bool -> t = \"rust_expr_sort\""},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"  let sort ?(descending = false) t = sort t ~descending","class":"lineCov","hits":"1","order":"1009",},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"  external sort_by : t -> descending:bool -> by:t list -> t = \"rust_expr_sort_by\""},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"  let sort_by ?(descending = false) t ~by = sort_by t ~descending ~by","class":"lineNoCov","hits":"0",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"  external set_sorted_flag"},
{"lineNum":"   47","line":"    :  t"},
{"lineNum":"   48","line":"    -> sorted:[ `Ascending | `Descending | `Not ]"},
{"lineNum":"   49","line":"    -> t"},
{"lineNum":"   50","line":"    = \"rust_expr_set_sorted_flag\""},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"  external first : t -> t = \"rust_expr_first\""},
{"lineNum":"   53","line":"  external last : t -> t = \"rust_expr_last\""},
{"lineNum":"   54","line":"  external reverse : t -> t = \"rust_expr_reverse\""},
{"lineNum":"   55","line":"  external head : t -> length:int option -> t = \"rust_expr_head\""},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"  let head ?length t = head t ~length","class":"lineNoCov","hits":"0",},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"  external tail : t -> length:int option -> t = \"rust_expr_tail\""},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"  let tail ?length t = tail t ~length","class":"lineNoCov","hits":"0",},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"  external take : t -> idx:t -> t = \"rust_expr_take\""},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"  external sample_n"},
{"lineNum":"   66","line":"    :  t"},
{"lineNum":"   67","line":"    -> n:int"},
{"lineNum":"   68","line":"    -> with_replacement:bool"},
{"lineNum":"   69","line":"    -> shuffle:bool"},
{"lineNum":"   70","line":"    -> seed:int option"},
{"lineNum":"   71","line":"    -> fixed_seed:bool"},
{"lineNum":"   72","line":"    -> t"},
{"lineNum":"   73","line":"    = \"rust_expr_sample_n_bytecode\" \"rust_expr_sample_n\""},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"  let sample_n ?seed ?(fixed_seed = true) t ~n ~with_replacement ~shuffle =","class":"lineNoCov","hits":"0",},
{"lineNum":"   76","line":"    sample_n t ~n ~with_replacement ~shuffle ~seed ~fixed_seed","class":"lineNoCov","hits":"0",},
{"lineNum":"   77","line":"  ;;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"  external filter : t -> predicate:t -> t = \"rust_expr_filter\""},
{"lineNum":"   80","line":"  external ceil : t -> t = \"rust_expr_ceil\""},
{"lineNum":"   81","line":"  external floor : t -> t = \"rust_expr_floor\""},
{"lineNum":"   82","line":"  external clip_min_float : t -> min:float -> t = \"rust_expr_clip_min_float\""},
{"lineNum":"   83","line":"  external clip_max_float : t -> max:float -> t = \"rust_expr_clip_max_float\""},
{"lineNum":"   84","line":"  external clip_min_int : t -> min:int -> t = \"rust_expr_clip_min_int\""},
{"lineNum":"   85","line":"  external clip_max_int : t -> max:int -> t = \"rust_expr_clip_max_int\""},
{"lineNum":"   86","line":"  external pow : t -> t -> t = \"rust_expr_pow\""},
{"lineNum":"   87","line":"  external sum : t -> t = \"rust_expr_sum\""},
{"lineNum":"   88","line":"  external mean : t -> t = \"rust_expr_mean\""},
{"lineNum":"   89","line":"  external median : t -> t = \"rust_expr_median\""},
{"lineNum":"   90","line":"  external mode : t -> t = \"rust_expr_mode\""},
{"lineNum":"   91","line":"  external max : t -> t = \"rust_expr_max\""},
{"lineNum":"   92","line":"  external min : t -> t = \"rust_expr_min\""},
{"lineNum":"   93","line":"  external arg_max : t -> t = \"rust_expr_arg_max\""},
{"lineNum":"   94","line":"  external arg_min : t -> t = \"rust_expr_arg_min\""},
{"lineNum":"   95","line":"  external count : t -> t = \"rust_expr_count\""},
{"lineNum":"   96","line":"  external count_ : unit -> t = \"rust_expr_count_\""},
{"lineNum":"   97","line":"  external n_unique : t -> t = \"rust_expr_n_unique\""},
{"lineNum":"   98","line":"  external approx_n_unique : t -> t = \"rust_expr_approx_n_unique\""},
{"lineNum":"   99","line":"  external explode : t -> t = \"rust_expr_explode\""},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"  external over"},
{"lineNum":"  102","line":"    :  t"},
{"lineNum":"  103","line":"    -> partition_by:t list"},
{"lineNum":"  104","line":"    -> mapping_strategy:[ `Groups_to_rows | `Explode | `Join ]"},
{"lineNum":"  105","line":"    -> t"},
{"lineNum":"  106","line":"    = \"rust_expr_over\""},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"  let over ?(mapping_strategy = `Groups_to_rows) t ~partition_by =","class":"lineNoCov","hits":"0",},
{"lineNum":"  109","line":"    over t ~partition_by ~mapping_strategy","class":"lineNoCov","hits":"0",},
{"lineNum":"  110","line":"  ;;"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  external concat_list : t list -> (t, string) result = \"rust_expr_concat_list\""},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"  let concat_list ts =","class":"lineCov","hits":"1","order":"1012",},
{"lineNum":"  115","line":"    Nonempty_list.to_list ts","class":"lineCov","hits":"1","order":"1018",},
{"lineNum":"  116","line":"    |> concat_list"},
{"lineNum":"  117","line":"    (* Currently the only way time that rust_expr_concat_list will return an"},
{"lineNum":"  118","line":"       Error is when the argument is an empty list, so this should never raise *)"},
{"lineNum":"  119","line":"    |> Utils.string_result_ok_exn","class":"lineCov","hits":"1","order":"1019",},
{"lineNum":"  120","line":"  ;;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  external null_count : t -> t = \"rust_expr_null_count\""},
{"lineNum":"  123","line":"  external is_null : t -> t = \"rust_expr_is_null\""},
{"lineNum":"  124","line":"  external is_not_null : t -> t = \"rust_expr_is_not_null\""},
{"lineNum":"  125","line":"  external is_nan : t -> t = \"rust_expr_is_nan\""},
{"lineNum":"  126","line":"  external is_not_nan : t -> t = \"rust_expr_is_not_nan\""},
{"lineNum":"  127","line":"  external is_finite : t -> t = \"rust_expr_is_finite\""},
{"lineNum":"  128","line":"  external is_infinite : t -> t = \"rust_expr_is_infinite\""},
{"lineNum":"  129","line":"  external fill_null : t -> with_:t -> t = \"rust_expr_fill_null\""},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"  external fill_null\'"},
{"lineNum":"  132","line":"    :  t"},
{"lineNum":"  133","line":"    -> strategy:Fill_null_strategy.t"},
{"lineNum":"  134","line":"    -> t"},
{"lineNum":"  135","line":"    = \"rust_expr_fill_null_with_strategy\""},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"  external interpolate"},
{"lineNum":"  138","line":"    :  t"},
{"lineNum":"  139","line":"    -> method_:[ `Linear | `Nearest ]"},
{"lineNum":"  140","line":"    -> t"},
{"lineNum":"  141","line":"    = \"rust_expr_interpolate\""},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"  let interpolate ?(method_ = `Linear) t = interpolate t ~method_","class":"lineCov","hits":"1","order":"1013",},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"  external fill_nan : t -> with_:t -> t = \"rust_expr_fill_nan\""},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"  external rank"},
{"lineNum":"  148","line":"    :  t"},
{"lineNum":"  149","line":"    -> method_:[ `Average | `Min | `Max | `Dense | `Ordinal | `Random ]"},
{"lineNum":"  150","line":"    -> descending:bool"},
{"lineNum":"  151","line":"    -> seed:int option"},
{"lineNum":"  152","line":"    -> t"},
{"lineNum":"  153","line":"    = \"rust_expr_rank\""},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"  let rank ?(method_ = `Dense) ?(descending = false) ?seed t =","class":"lineCov","hits":"1","order":"1021",},
{"lineNum":"  156","line":"    rank t ~method_ ~descending ~seed","class":"lineCov","hits":"1","order":"1011",},
{"lineNum":"  157","line":"  ;;"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"  external when_ : (t * t) list -> otherwise:t -> t = \"rust_expr_when_then\""},
{"lineNum":"  160","line":"  external shift : t -> periods:int -> fill_value:t option -> t = \"rust_expr_shift\""},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"  let shift ?fill_value t ~periods = shift t ~periods ~fill_value","class":"lineNoCov","hits":"0",},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"  (* TODO: couldn\'t we do something like Haskell\'s Foldable typeclass and generalize? *)"},
{"lineNum":"  165","line":"  external cum_count : t -> reverse:bool -> t = \"rust_expr_cum_count\""},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"  let cum_count ?(reverse = false) t = cum_count t ~reverse","class":"lineNoCov","hits":"0",},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"  external cum_sum : t -> reverse:bool -> t = \"rust_expr_cum_sum\""},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"  let cum_sum ?(reverse = false) t = cum_sum t ~reverse","class":"lineNoCov","hits":"0",},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"  external cum_prod : t -> reverse:bool -> t = \"rust_expr_cum_prod\""},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"  let cum_prod ?(reverse = false) t = cum_prod t ~reverse","class":"lineNoCov","hits":"0",},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"  external cum_min : t -> reverse:bool -> t = \"rust_expr_cum_min\""},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"  let cum_min ?(reverse = false) t = cum_min t ~reverse","class":"lineNoCov","hits":"0",},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"  external cum_max : t -> reverse:bool -> t = \"rust_expr_cum_max\""},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"  let cum_max ?(reverse = false) t = cum_max t ~reverse","class":"lineNoCov","hits":"0",},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"  external alias : t -> name:string -> t = \"rust_expr_alias\""},
{"lineNum":"  186","line":"  external prefix : t -> prefix:string -> t = \"rust_expr_prefix\""},
{"lineNum":"  187","line":"  external suffix : t -> suffix:string -> t = \"rust_expr_suffix\""},
{"lineNum":"  188","line":"  external round : t -> decimals:int -> t = \"rust_expr_round\""},
{"lineNum":"  189","line":"  external equal : t -> t -> t = \"rust_expr_eq\""},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"  let ( = ) = equal","class":"lineCov","hits":"1","order":"1006",},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"  external ( <> ) : t -> t -> t = \"rust_expr_neq\""},
{"lineNum":"  194","line":"  external ( > ) : t -> t -> t = \"rust_expr_gt\""},
{"lineNum":"  195","line":"  external ( >= ) : t -> t -> t = \"rust_expr_gt_eq\""},
{"lineNum":"  196","line":"  external ( < ) : t -> t -> t = \"rust_expr_lt\""},
{"lineNum":"  197","line":"  external ( <= ) : t -> t -> t = \"rust_expr_lt_eq\""},
{"lineNum":"  198","line":"  external not : t -> t = \"rust_expr_not\""},
{"lineNum":"  199","line":"  external and_ : t -> t -> t = \"rust_expr_and\""},
{"lineNum":"  200","line":"  external or_ : t -> t -> t = \"rust_expr_or\""},
{"lineNum":"  201","line":"  external xor : t -> t -> t = \"rust_expr_xor\""},
{"lineNum":"  202","line":"  external add : t -> t -> t = \"rust_expr_add\""},
{"lineNum":"  203","line":"  external sub : t -> t -> t = \"rust_expr_sub\""},
{"lineNum":"  204","line":"  external mul : t -> t -> t = \"rust_expr_mul\""},
{"lineNum":"  205","line":"  external div : t -> t -> t = \"rust_expr_div\""},
{"lineNum":"  206","line":"  external floor_div : t -> t -> t = \"rust_expr_floor_div\""},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"  let ( // ) = floor_div","class":"lineNoCov","hits":"0",},
{"lineNum":"  209","line":"end"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"include T","class":"lineCov","hits":"1","order":"113",},
{"lineNum":"  212","line":"include Common.Make_logic (T)","class":"lineCov","hits":"1","order":"122",},
{"lineNum":"  213","line":"include Common.Make_numeric (T)","class":"lineCov","hits":"1","order":"116",},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"module Dt = struct","class":"lineCov","hits":"1","order":"120",},
{"lineNum":"  216","line":"  external strftime : t -> format:string -> t = \"rust_expr_dt_strftime\""},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"  (* TODO: consider supporting Time_ns.Zone.t *)"},
{"lineNum":"  219","line":"  external convert_time_zone : t -> to_:string -> t = \"rust_expr_dt_convert_time_zone\""},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"  external replace_time_zone"},
{"lineNum":"  222","line":"    :  t"},
{"lineNum":"  223","line":"    -> to_:string option"},
{"lineNum":"  224","line":"    -> use_earliest:bool option"},
{"lineNum":"  225","line":"    -> t"},
{"lineNum":"  226","line":"    = \"rust_expr_dt_replace_time_zone\""},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"  let replace_time_zone ?use_earliest t ~to_ = replace_time_zone t ~to_ ~use_earliest","class":"lineCov","hits":"1","order":"1005",},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"  external year : t -> t = \"rust_expr_dt_year\""},
{"lineNum":"  231","line":"  external month : t -> t = \"rust_expr_dt_month\""},
{"lineNum":"  232","line":"  external day : t -> t = \"rust_expr_dt_day\""},
{"lineNum":"  233","line":"  external days : t -> t = \"rust_expr_dt_days\""},
{"lineNum":"  234","line":"  external hours : t -> t = \"rust_expr_dt_hours\""},
{"lineNum":"  235","line":"  external minutes : t -> t = \"rust_expr_dt_minutes\""},
{"lineNum":"  236","line":"  external seconds : t -> t = \"rust_expr_dt_seconds\""},
{"lineNum":"  237","line":"  external milliseconds : t -> t = \"rust_expr_dt_milliseconds\""},
{"lineNum":"  238","line":"  external microseconds : t -> t = \"rust_expr_dt_microseconds\""},
{"lineNum":"  239","line":"  external nanoseconds : t -> t = \"rust_expr_dt_nanoseconds\""},
{"lineNum":"  240","line":"end"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"module Str = struct","class":"lineCov","hits":"1","order":"117",},
{"lineNum":"  243","line":"  external split : t -> by:string -> inclusive:bool -> t = \"rust_expr_str_split\""},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"  let split ?(inclusive = false) t ~by = split t ~by ~inclusive","class":"lineCov","hits":"1","order":"1004",},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"  external strptime"},
{"lineNum":"  248","line":"    :  t"},
{"lineNum":"  249","line":"    -> type_:Data_type.t"},
{"lineNum":"  250","line":"    -> format:string"},
{"lineNum":"  251","line":"    -> t"},
{"lineNum":"  252","line":"    = \"rust_expr_str_strptime\""},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"  external lengths : t -> t = \"rust_expr_str_lengths\""},
{"lineNum":"  255","line":"  external n_chars : t -> t = \"rust_expr_str_n_chars\""},
{"lineNum":"  256","line":"  external contains : t -> pat:string -> literal:bool -> t = \"rust_expr_str_contains\""},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"  let contains ?(literal = false) t ~pat = contains t ~pat ~literal","class":"lineCov","hits":"1","order":"1014",},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"  external starts_with : t -> prefix:string -> t = \"rust_expr_str_starts_with\""},
{"lineNum":"  261","line":"  external ends_with : t -> suffix:string -> t = \"rust_expr_str_ends_with\""},
{"lineNum":"  262","line":"  external extract : t -> pat:string -> group:int -> t = \"rust_expr_str_extract\""},
{"lineNum":"  263","line":"  external extract_all : t -> pat:string -> t = \"rust_expr_str_extract_all\""},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"  external replace"},
{"lineNum":"  266","line":"    :  t"},
{"lineNum":"  267","line":"    -> pat:string"},
{"lineNum":"  268","line":"    -> with_:string"},
{"lineNum":"  269","line":"    -> literal:bool"},
{"lineNum":"  270","line":"    -> t"},
{"lineNum":"  271","line":"    = \"rust_expr_str_replace\""},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"  let replace ?(literal = false) t ~pat ~with_ = replace t ~pat ~with_ ~literal","class":"lineCov","hits":"1","order":"1020",},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"  external replace_all"},
{"lineNum":"  276","line":"    :  t"},
{"lineNum":"  277","line":"    -> pat:string"},
{"lineNum":"  278","line":"    -> with_:string"},
{"lineNum":"  279","line":"    -> literal:bool"},
{"lineNum":"  280","line":"    -> t"},
{"lineNum":"  281","line":"    = \"rust_expr_str_replace_all\""},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"  let replace_all ?(literal = false) t ~pat ~with_ = replace_all t ~pat ~with_ ~literal","class":"lineCov","hits":"1","order":"1003",},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"  external strip : t -> matches:string option -> t = \"rust_expr_str_strip\""},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"  let strip ?matches t = strip t ~matches","class":"lineNoCov","hits":"0",},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"  external lstrip : t -> matches:string option -> t = \"rust_expr_str_lstrip\""},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"  let lstrip ?matches t = lstrip t ~matches","class":"lineNoCov","hits":"0",},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"  external rstrip : t -> matches:string option -> t = \"rust_expr_str_rstrip\""},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"  let rstrip ?matches t = rstrip t ~matches","class":"lineNoCov","hits":"0",},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"  external to_lowercase : t -> t = \"rust_expr_str_to_lowercase\""},
{"lineNum":"  298","line":"  external to_uppercase : t -> t = \"rust_expr_str_to_uppercase\""},
{"lineNum":"  299","line":"  external slice : t -> start:int -> length:int option -> t = \"rust_expr_str_slice\""},
{"lineNum":"  300","line":"end"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"module List = struct","class":"lineCov","hits":"1","order":"115",},
{"lineNum":"  303","line":"  external lengths : t -> t = \"rust_expr_list_lengths\""},
{"lineNum":"  304","line":"  external slice : t -> offset:t -> length:t -> t = \"rust_expr_list_slice\""},
{"lineNum":"  305","line":"  external head : t -> n:t -> t = \"rust_expr_list_head\""},
{"lineNum":"  306","line":"  external tail : t -> n:t -> t = \"rust_expr_list_tail\""},
{"lineNum":"  307","line":"  external sum : t -> t = \"rust_expr_list_sum\""},
{"lineNum":"  308","line":"  external eval : t -> expr:t -> parallel:bool -> t = \"rust_expr_list_eval\""},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"  let eval ?(parallel = false) t ~expr = eval t ~expr ~parallel","class":"lineCov","hits":"1","order":"1007",},
{"lineNum":"  311","line":"end","class":"lineCov","hits":"1","order":"125",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "", "date" : "2023-09-23 10:46:05", "instrumented" : 51, "covered" : 33,};
var merged_data = [];
