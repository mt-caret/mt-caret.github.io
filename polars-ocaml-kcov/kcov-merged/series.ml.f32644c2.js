var data = {lines:[
{"lineNum":"    1","line":"open! Core","class":"lineCov","hits":"1","order":"60",},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"module T = struct","class":"lineCov","hits":"1","order":"59",},
{"lineNum":"    4","line":"  type t"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"  (* TODO: Consider using Bigarray here instead of OCaml lists to keep memory outside the"},
{"lineNum":"    7","line":"     OCaml heap and skip a copy. *)"},
{"lineNum":"    8","line":"  external create : \'a Data_type.Typed.t -> string -> \'a list -> t = \"rust_series_new\""},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"  let create (type a) (data_type : a Data_type.Typed.t) name values =","class":"lineCov","hits":"1","order":"889",},
{"lineNum":"   11","line":"    match Data_type.Typed.flatten_custom data_type with","class":"lineCov","hits":"1","order":"890",},
{"lineNum":"   12","line":"    | Custom { data_type; f = _; f_inverse } ->","class":"lineCov","hits":"1","order":"1594",},
{"lineNum":"   13","line":"      create data_type name (List.map values ~f:f_inverse)","class":"lineCov","hits":"1","order":"1593",},
{"lineNum":"   14","line":"    | data_type -> create data_type name values","class":"lineCov","hits":"1","order":"893",},
{"lineNum":"   15","line":"  ;;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"  external createo"},
{"lineNum":"   18","line":"    :  \'a Data_type.Typed.t"},
{"lineNum":"   19","line":"    -> string"},
{"lineNum":"   20","line":"    -> \'a option list"},
{"lineNum":"   21","line":"    -> t"},
{"lineNum":"   22","line":"    = \"rust_series_new_option\""},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"  let createo (type a) (data_type : a Data_type.Typed.t) name values =","class":"lineCov","hits":"1","order":"891",},
{"lineNum":"   25","line":"    match Data_type.Typed.flatten_custom data_type with","class":"lineCov","hits":"1","order":"906",},
{"lineNum":"   26","line":"    | Custom { data_type; f = _; f_inverse } ->","class":"lineCov","hits":"1","order":"1592",},
{"lineNum":"   27","line":"      createo data_type name (List.map values ~f:(Option.map ~f:f_inverse))","class":"lineCov","hits":"1","order":"1591",},
{"lineNum":"   28","line":"    | data_type -> createo data_type name values","class":"lineCov","hits":"1","order":"896",},
{"lineNum":"   29","line":"  ;;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"  (* TODO: the astute reader will realize that this is quite terrible when"},
{"lineNum":"   32","line":"     trying to passing float arrays! Unfortunately it\'s not clear to me how"},
{"lineNum":"   33","line":"     to pass regular arrays safely to Rust, whereas this is definitely safe"},
{"lineNum":"   34","line":"     since [Uniform_array.t] guarantees elements are boxed."},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"     See https://github.com/mt-caret/polars-ocaml/pull/67 for how naively trying to"},
{"lineNum":"   37","line":"     transmute on the Rust side doesn\'t work. *)"},
{"lineNum":"   38","line":"  external create\'"},
{"lineNum":"   39","line":"    :  \'a Data_type.Typed.t"},
{"lineNum":"   40","line":"    -> string"},
{"lineNum":"   41","line":"    -> \'a Uniform_array.t"},
{"lineNum":"   42","line":"    -> t"},
{"lineNum":"   43","line":"    = \"rust_series_new_array\""},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"  let create\' (type a) (data_type : a Data_type.Typed.t) name values =","class":"lineCov","hits":"1","order":"1596",},
{"lineNum":"   46","line":"    match Data_type.Typed.flatten_custom data_type with","class":"lineCov","hits":"1","order":"1598",},
{"lineNum":"   47","line":"    | Custom { data_type; f = _; f_inverse } ->","class":"lineCov","hits":"1","order":"1600",},
{"lineNum":"   48","line":"      create\' data_type name (Uniform_array.map values ~f:f_inverse)","class":"lineCov","hits":"1","order":"1588",},
{"lineNum":"   49","line":"    | data_type -> create\' data_type name values","class":"lineCov","hits":"1","order":"1587",},
{"lineNum":"   50","line":"  ;;"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"  external createo\'"},
{"lineNum":"   53","line":"    :  \'a Data_type.Typed.t"},
{"lineNum":"   54","line":"    -> string"},
{"lineNum":"   55","line":"    -> \'a option Uniform_array.t"},
{"lineNum":"   56","line":"    -> t"},
{"lineNum":"   57","line":"    = \"rust_series_new_option_array\""},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"  let createo\' (type a) (data_type : a Data_type.Typed.t) name values =","class":"lineCov","hits":"1","order":"1585",},
{"lineNum":"   60","line":"    match Data_type.Typed.flatten_custom data_type with","class":"lineCov","hits":"1","order":"1582",},
{"lineNum":"   61","line":"    | Custom { data_type; f = _; f_inverse } ->","class":"lineCov","hits":"1","order":"1580",},
{"lineNum":"   62","line":"      createo\' data_type name (Uniform_array.map values ~f:(Option.map ~f:f_inverse))","class":"lineCov","hits":"1","order":"1579",},
{"lineNum":"   63","line":"    | data_type -> createo\' data_type name values","class":"lineCov","hits":"1","order":"1578",},
{"lineNum":"   64","line":"  ;;"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"  let int = create Int64","class":"lineCov","hits":"1","order":"66",},
{"lineNum":"   67","line":"  let into = createo Int64","class":"lineCov","hits":"1","order":"65",},
{"lineNum":"   68","line":"  let float = create Float64","class":"lineCov","hits":"1","order":"67",},
{"lineNum":"   69","line":"  let floato = createo Float64","class":"lineCov","hits":"1","order":"69",},
{"lineNum":"   70","line":"  let bool = create Boolean","class":"lineCov","hits":"1","order":"70",},
{"lineNum":"   71","line":"  let boolo = createo Boolean","class":"lineCov","hits":"1","order":"71",},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"  (* TODO: perhaps this should actually be Bytes? *)"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"  let string = create Utf8","class":"lineCov","hits":"1","order":"74",},
{"lineNum":"   76","line":"  let stringo = createo Utf8","class":"lineCov","hits":"1","order":"75",},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"  external datetime"},
{"lineNum":"   79","line":"    :  string"},
{"lineNum":"   80","line":"    -> Common.Naive_datetime.t list"},
{"lineNum":"   81","line":"    -> t"},
{"lineNum":"   82","line":"    = \"rust_series_new_datetime\""},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"  external datetime_option"},
{"lineNum":"   85","line":"    :  string"},
{"lineNum":"   86","line":"    -> Common.Naive_datetime.t option list"},
{"lineNum":"   87","line":"    -> t"},
{"lineNum":"   88","line":"    = \"rust_series_new_datetime_option\""},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"  let datetime\' name dates =","class":"lineNoCov","hits":"0",},
{"lineNum":"   91","line":"    datetime name (List.map dates ~f:Common.Naive_datetime.of_date)","class":"lineNoCov","hits":"0",},
{"lineNum":"   92","line":"  ;;"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"  let datetime_option\' name dates =","class":"lineNoCov","hits":"0",},
{"lineNum":"   95","line":"    datetime_option name (List.map dates ~f:(Option.map ~f:Common.Naive_datetime.of_date))","class":"lineNoCov","hits":"0",},
{"lineNum":"   96","line":"  ;;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"  let time string times =","class":"lineNoCov","hits":"0",},
{"lineNum":"   99","line":"    datetime string (List.map times ~f:Common.Naive_datetime.of_time_ns_exn)","class":"lineNoCov","hits":"0",},
{"lineNum":"  100","line":"  ;;"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"  let time_option string times =","class":"lineNoCov","hits":"0",},
{"lineNum":"  103","line":"    datetime_option","class":"lineNoCov","hits":"0",},
{"lineNum":"  104","line":"      string"},
{"lineNum":"  105","line":"      (List.map times ~f:(Option.map ~f:Common.Naive_datetime.of_time_ns_exn))","class":"lineNoCov","hits":"0",},
{"lineNum":"  106","line":"  ;;"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"  external date : string -> Common.Naive_date.t list -> t = \"rust_series_new_date\""},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"  let date name dates = date name (List.map dates ~f:Common.Naive_date.of_date)","class":"lineCov","hits":"1","order":"902",},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  external date_option"},
{"lineNum":"  113","line":"    :  string"},
{"lineNum":"  114","line":"    -> Common.Naive_date.t option list"},
{"lineNum":"  115","line":"    -> t"},
{"lineNum":"  116","line":"    = \"rust_series_new_date_option\""},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"  let date_option name dates =","class":"lineCov","hits":"1","order":"1586",},
{"lineNum":"  119","line":"    date_option name (List.map dates ~f:(Option.map ~f:Common.Naive_date.of_date))","class":"lineCov","hits":"1","order":"1583",},
{"lineNum":"  120","line":"  ;;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  external date_range"},
{"lineNum":"  123","line":"    :  string"},
{"lineNum":"  124","line":"    -> Common.Naive_datetime.t"},
{"lineNum":"  125","line":"    -> Common.Naive_datetime.t"},
{"lineNum":"  126","line":"    -> every:string option"},
{"lineNum":"  127","line":"    -> cast_to_date:bool"},
{"lineNum":"  128","line":"    -> (t, string) result"},
{"lineNum":"  129","line":"    = \"rust_series_date_range\""},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"  let date_range_castable ?every name ~start ~stop ~cast_to_date =","class":"lineNoCov","hits":"0",},
{"lineNum":"  132","line":"    date_range name start stop ~every ~cast_to_date","class":"lineCov","hits":"1","order":"894",},
{"lineNum":"  133","line":"  ;;"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"  let date_range ?every name ~start ~stop =","class":"lineCov","hits":"1","order":"897",},
{"lineNum":"  136","line":"    date_range_castable"},
{"lineNum":"  137","line":"      ?every"},
{"lineNum":"  138","line":"      name"},
{"lineNum":"  139","line":"      ~start:(Common.Naive_datetime.of_date start)","class":"lineCov","hits":"1","order":"904",},
{"lineNum":"  140","line":"      ~stop:(Common.Naive_datetime.of_date stop)","class":"lineCov","hits":"1","order":"903",},
{"lineNum":"  141","line":"      ~cast_to_date:true"},
{"lineNum":"  142","line":"  ;;"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"  let date_range_exn ?every name ~start ~stop =","class":"lineCov","hits":"1","order":"892",},
{"lineNum":"  145","line":"    date_range ?every name ~start ~stop |> Utils.string_result_ok_exn","class":"lineCov","hits":"1","order":"895",},
{"lineNum":"  146","line":"  ;;"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"  let datetime_range ?every name ~start ~stop =","class":"lineCov","hits":"1","order":"905",},
{"lineNum":"  149","line":"    date_range_castable ?every name ~start ~stop ~cast_to_date:false"},
{"lineNum":"  150","line":"  ;;"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"  let datetime_range_exn ?every name ~start ~stop =","class":"lineCov","hits":"1","order":"907",},
{"lineNum":"  153","line":"    datetime_range ?every name ~start ~stop |> Utils.string_result_ok_exn","class":"lineCov","hits":"1","order":"900",},
{"lineNum":"  154","line":"  ;;"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"  let datetime_range\' ?every name ~start ~stop =","class":"lineCov","hits":"1","order":"908",},
{"lineNum":"  157","line":"    date_range_castable"},
{"lineNum":"  158","line":"      ?every"},
{"lineNum":"  159","line":"      name"},
{"lineNum":"  160","line":"      ~start:(Common.Naive_datetime.of_date start)","class":"lineCov","hits":"1","order":"909",},
{"lineNum":"  161","line":"      ~stop:(Common.Naive_datetime.of_date stop)","class":"lineCov","hits":"1","order":"901",},
{"lineNum":"  162","line":"      ~cast_to_date:false"},
{"lineNum":"  163","line":"  ;;"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"  let datetime_range_exn\' ?every name ~start ~stop =","class":"lineCov","hits":"1","order":"898",},
{"lineNum":"  166","line":"    datetime_range\' ?every name ~start ~stop |> Utils.string_result_ok_exn","class":"lineCov","hits":"1","order":"888",},
{"lineNum":"  167","line":"  ;;"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"  external to_list : \'a Data_type.Typed.t -> t -> \'a list = \"rust_series_to_list\""},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"  let to_list (type a) (data_type : a Data_type.Typed.t) t =","class":"lineCov","hits":"1","order":"1595",},
{"lineNum":"  172","line":"    match Data_type.Typed.flatten_custom data_type with","class":"lineCov","hits":"1","order":"1597",},
{"lineNum":"  173","line":"    | Custom { data_type; f; f_inverse = _ } -> to_list data_type t |> List.map ~f","class":"lineCov","hits":"1","order":"1599",},
{"lineNum":"  174","line":"    | data_type -> to_list data_type t","class":"lineCov","hits":"1","order":"1601",},
{"lineNum":"  175","line":"  ;;"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"  external to_option_list"},
{"lineNum":"  178","line":"    :  \'a Data_type.Typed.t"},
{"lineNum":"  179","line":"    -> t"},
{"lineNum":"  180","line":"    -> \'a option list"},
{"lineNum":"  181","line":"    = \"rust_series_to_option_list\""},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"  let to_option_list (type a) (data_type : a Data_type.Typed.t) t =","class":"lineCov","hits":"1","order":"1575",},
{"lineNum":"  184","line":"    match Data_type.Typed.flatten_custom data_type with","class":"lineCov","hits":"1","order":"1574",},
{"lineNum":"  185","line":"    | Custom { data_type; f; f_inverse = _ } ->","class":"lineCov","hits":"1","order":"1573",},
{"lineNum":"  186","line":"      to_option_list data_type t |> List.map ~f:(Option.map ~f)","class":"lineCov","hits":"1","order":"1584",},
{"lineNum":"  187","line":"    | data_type -> to_option_list data_type t","class":"lineCov","hits":"1","order":"1581",},
{"lineNum":"  188","line":"  ;;"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"  external get : \'a Data_type.Typed.t -> t -> int -> \'a option = \"rust_series_get\""},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"  let get (type a) (data_type : a Data_type.Typed.t) t i =","class":"lineCov","hits":"1","order":"1572",},
{"lineNum":"  193","line":"    match Data_type.Typed.flatten_custom data_type with","class":"lineCov","hits":"1","order":"1577",},
{"lineNum":"  194","line":"    | Custom { data_type; f; f_inverse = _ } -> get data_type t i |> Option.map ~f","class":"lineCov","hits":"1","order":"1576",},
{"lineNum":"  195","line":"    | data_type -> get data_type t i","class":"lineCov","hits":"1","order":"1589",},
{"lineNum":"  196","line":"  ;;"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"  let get_exn data_type t i = get data_type t i |> Option.value_exn ~here:[%here]","class":"lineCov","hits":"1","order":"1590",},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"  external name : t -> string = \"rust_series_name\""},
{"lineNum":"  201","line":"  external rename : t -> name:string -> t = \"rust_series_rename\""},
{"lineNum":"  202","line":"  external dtype : t -> Data_type.t = \"rust_series_dtype\""},
{"lineNum":"  203","line":"  external to_data_frame : t -> Data_frame0.t = \"rust_series_to_data_frame\""},
{"lineNum":"  204","line":"  external sort : t -> descending:bool -> t = \"rust_series_sort\""},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"  let sort ?(descending = false) t = sort t ~descending","class":"lineNoCov","hits":"0",},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"  external head : t -> length:int option -> t = \"rust_series_head\""},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"  let head ?length t = head t ~length","class":"lineCov","hits":"1","order":"1571",},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"  external tail : t -> length:int option -> t = \"rust_series_tail\""},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"  let tail ?length t = tail t ~length","class":"lineNoCov","hits":"0",},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"  external sample_n"},
{"lineNum":"  217","line":"    :  t"},
{"lineNum":"  218","line":"    -> n:int"},
{"lineNum":"  219","line":"    -> with_replacement:bool"},
{"lineNum":"  220","line":"    -> shuffle:bool"},
{"lineNum":"  221","line":"    -> seed:int option"},
{"lineNum":"  222","line":"    -> (t, string) result"},
{"lineNum":"  223","line":"    = \"rust_series_sample_n\""},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"  let sample_n ?seed t ~n ~with_replacement ~shuffle =","class":"lineNoCov","hits":"0",},
{"lineNum":"  226","line":"    sample_n t ~n ~with_replacement ~shuffle ~seed","class":"lineNoCov","hits":"0",},
{"lineNum":"  227","line":"  ;;"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"  let sample_n_exn ?seed t ~n ~with_replacement ~shuffle =","class":"lineNoCov","hits":"0",},
{"lineNum":"  230","line":"    sample_n ?seed t ~n ~with_replacement ~shuffle |> Utils.string_result_ok_exn","class":"lineNoCov","hits":"0",},
{"lineNum":"  231","line":"  ;;"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"  external fill_null"},
{"lineNum":"  234","line":"    :  t"},
{"lineNum":"  235","line":"    -> strategy:Fill_null_strategy.t"},
{"lineNum":"  236","line":"    -> (t, string) result"},
{"lineNum":"  237","line":"    = \"rust_series_fill_null_with_strategy\""},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"  let fill_null_exn t ~strategy = fill_null t ~strategy |> Utils.string_result_ok_exn","class":"lineNoCov","hits":"0",},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"  external interpolate"},
{"lineNum":"  242","line":"    :  t"},
{"lineNum":"  243","line":"    -> method_:[ `Linear | `Nearest ]"},
{"lineNum":"  244","line":"    -> (t, string) result"},
{"lineNum":"  245","line":"    = \"rust_series_interpolate\""},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"  let interpolate_exn t ~method_ = interpolate t ~method_ |> Utils.string_result_ok_exn","class":"lineNoCov","hits":"0",},
{"lineNum":"  248","line":"  let binary_op op t1 t2 = op t1 t2 |> Utils.string_result_ok_exn","class":"lineNoCov","hits":"0",},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"  external equal : t -> t -> (t, string) result = \"rust_series_eq\""},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"  let ( = ) = binary_op equal","class":"lineCov","hits":"1","order":"64",},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"  external ( <> ) : t -> t -> (t, string) result = \"rust_series_neq\""},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"  let ( <> ) = binary_op ( <> )","class":"lineCov","hits":"1","order":"63",},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"  external ( > ) : t -> t -> (t, string) result = \"rust_series_gt\""},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"  let ( > ) = binary_op ( > )","class":"lineCov","hits":"1","order":"62",},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"  external ( >= ) : t -> t -> (t, string) result = \"rust_series_gt_eq\""},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"  let ( >= ) = binary_op ( >= )","class":"lineCov","hits":"1","order":"68",},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"  external ( < ) : t -> t -> (t, string) result = \"rust_series_lt\""},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"  let ( < ) = binary_op ( < )","class":"lineCov","hits":"1","order":"72",},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"  external ( <= ) : t -> t -> (t, string) result = \"rust_series_lt_eq\""},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"  let ( <= ) = binary_op ( <= )","class":"lineCov","hits":"1","order":"73",},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"  external add : t -> t -> t = \"rust_series_add\""},
{"lineNum":"  275","line":"  external sub : t -> t -> t = \"rust_series_sub\""},
{"lineNum":"  276","line":"  external mul : t -> t -> t = \"rust_series_mul\""},
{"lineNum":"  277","line":"  external div : t -> t -> t = \"rust_series_div\""},
{"lineNum":"  278","line":"  external to_string_hum : t -> string = \"rust_series_to_string_hum\""},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"  let print t = print_endline (to_string_hum t)","class":"lineCov","hits":"1","order":"899",},
{"lineNum":"  281","line":"  let pp formatter t = Stdlib.Format.pp_print_string formatter (to_string_hum t)","class":"lineNoCov","hits":"0",},
{"lineNum":"  282","line":"end"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"include T","class":"lineCov","hits":"1","order":"58",},
{"lineNum":"  285","line":"include Common.Make_numeric (T)","class":"lineCov","hits":"1","order":"61",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "", "date" : "2023-09-23 10:46:05", "instrumented" : 91, "covered" : 71,};
var merged_data = [];
