var data = {lines:[
{"lineNum":"    1","line":"use crate::utils::*;"},
{"lineNum":"    2","line":"use ocaml_interop::{DynBox, OCaml, OCamlFloat, OCamlInt, OCamlList, OCamlRef, ToOCaml};"},
{"lineNum":"    3","line":"use polars::prelude::*;"},
{"lineNum":"    4","line":"use polars_ocaml_macros::ocaml_interop_export;"},
{"lineNum":"    5","line":"use smartstring::{LazyCompact, SmartString};"},
{"lineNum":"    6","line":"use std::fs::File;"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"    9","line":"fn rust_data_frame_new("},
{"lineNum":"   10","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"   11","line":"    series: OCamlRef<OCamlList<DynBox<Series>>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   12","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"   13","line":"    let series: Vec<Series> = unwrap_abstract_vec(series.to_rust(cr));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"    DataFrame::new(series)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   16","line":"        .map(Abstract)"},
{"lineNum":"   17","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   18","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   19","line":"}"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   22","line":"fn rust_data_frame_read_csv("},
{"lineNum":"   23","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   24","line":"    path: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   25","line":"    schema: OCamlRef<Option<DynBox<Schema>>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":"    try_parse_dates: OCamlRef<Option<bool>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   27","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"   28","line":"    let path: String = path.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":"    let schema = schema","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   30","line":"        .to_rust::<Option<Abstract<Schema>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   31","line":"        .map(|Abstract(schema)| Arc::new(schema));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   32","line":"    let try_parse_dates: Option<bool> = try_parse_dates.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    CsvReader::from_path(path)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   35","line":"        .and_then(|csv_reader| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   36","line":"            let csv_reader = csv_reader.with_dtypes(schema);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   37","line":"            match try_parse_dates {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   38","line":"                None => csv_reader,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":"                Some(try_parse_dates) => csv_reader.with_try_parse_dates(try_parse_dates),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   40","line":"            }"},
{"lineNum":"   41","line":"            .finish()"},
{"lineNum":"   42","line":"        })","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   43","line":"        .map(Abstract)"},
{"lineNum":"   44","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   45","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   49","line":"fn rust_data_frame_write_csv("},
{"lineNum":"   50","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"   51","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"    path: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":") -> OCaml<Result<(), String>> {"},
{"lineNum":"   54","line":"    let Abstract(mut data_frame) = data_frame.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":"    let path: String = path.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    File::create(path)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   58","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   59","line":"        .and_then(|file| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   60","line":"            CsvWriter::new(&file)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   61","line":"                .finish(&mut data_frame)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   62","line":"                .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   63","line":"        })","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   64","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   68","line":"fn rust_data_frame_read_parquet("},
{"lineNum":"   69","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"   70","line":"    path: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"   72","line":"    let path: String = path.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    File::open(path)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   75","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   76","line":"        .and_then(|file| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"            ParquetReader::new(file)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"                .finish()"},
{"lineNum":"   79","line":"                .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   80","line":"        })","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   81","line":"        .map(Abstract)"},
{"lineNum":"   82","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"}"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   86","line":"fn rust_data_frame_write_parquet("},
{"lineNum":"   87","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"   88","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"    path: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":") -> OCaml<Result<(), String>> {"},
{"lineNum":"   91","line":"    let Abstract(mut data_frame) = data_frame.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"    let path: String = path.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    File::create(path)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   95","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   96","line":"        .and_then(|file| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   97","line":"            ParquetWriter::new(file)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   98","line":"                .finish(&mut data_frame)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"                .map(|_file_size_in_bytes| ())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  100","line":"                .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  101","line":"        })","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  102","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  106","line":"fn rust_data_frame_read_json("},
{"lineNum":"  107","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  108","line":"    path: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  110","line":"    let path: String = path.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    File::open(path)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  113","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  114","line":"        .and_then(|file| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"            JsonReader::new(file)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"                .finish()"},
{"lineNum":"  117","line":"                .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  118","line":"        })","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"        .map(Abstract)"},
{"lineNum":"  120","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"}"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  124","line":"fn rust_data_frame_write_json("},
{"lineNum":"  125","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  126","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"    path: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":") -> OCaml<Result<(), String>> {"},
{"lineNum":"  129","line":"    let Abstract(mut data_frame) = data_frame.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"    let path: String = path.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    File::create(path)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  133","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  134","line":"        .and_then(|file| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  135","line":"            JsonWriter::new(file)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  136","line":"                .with_json_format(JsonFormat::Json)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":"                .finish(&mut data_frame)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"                .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  139","line":"        })","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  140","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  144","line":"fn rust_data_frame_read_jsonl("},
{"lineNum":"  145","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  146","line":"    path: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  148","line":"    let path: String = path.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"    File::open(path)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  151","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  152","line":"        .and_then(|file| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  153","line":"            JsonLineReader::new(file)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"                .finish()"},
{"lineNum":"  155","line":"                .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  156","line":"        })","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  157","line":"        .map(Abstract)"},
{"lineNum":"  158","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"}"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  162","line":"fn rust_data_frame_write_jsonl("},
{"lineNum":"  163","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  164","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  165","line":"    path: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":") -> OCaml<Result<(), String>> {"},
{"lineNum":"  167","line":"    let Abstract(mut data_frame) = data_frame.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  168","line":"    let path: String = path.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    File::create(path)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  171","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  172","line":"        .and_then(|file| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  173","line":"            JsonWriter::new(file)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  174","line":"                .with_json_format(JsonFormat::JsonLines)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":"                .finish(&mut data_frame)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":"                .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  177","line":"        })","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  178","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  182","line":"fn rust_data_frame_describe("},
{"lineNum":"  183","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  184","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":"    percentiles: OCamlRef<Option<OCamlList<OCamlFloat>>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  187","line":"    let Abstract(data_frame) = data_frame.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":"    let percentiles: Option<Vec<f64>> = percentiles.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    // TODO: I\'m not sure why I can\'t do this with something like"},
{"lineNum":"  191","line":"    // .map(|percentiles| percentiles.as_slice()"},
{"lineNum":"  192","line":"    match percentiles {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  193","line":"        None => data_frame.describe(None),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  194","line":"        Some(percentiles) => data_frame.describe(Some(percentiles.as_slice())),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  195","line":"    }"},
{"lineNum":"  196","line":"    .map(Abstract)"},
{"lineNum":"  197","line":"    .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  198","line":"    .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  202","line":"fn rust_data_frame_height("},
{"lineNum":"  203","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  204","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  205","line":") -> OCaml<OCamlInt> {"},
{"lineNum":"  206","line":"    let Abstract(data_frame) = data_frame.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"    let height = data_frame.height() as i64;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  208","line":"    height.to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  212","line":"fn rust_data_frame_lazy("},
{"lineNum":"  213","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  214","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":") -> OCaml<DynBox<LazyFrame>> {"},
{"lineNum":"  216","line":"    dyn_box!(cr, |data_frame| data_frame.lazy())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  217","line":"}"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  220","line":"fn rust_data_frame_column("},
{"lineNum":"  221","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  222","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  223","line":"    name: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  224","line":") -> OCaml<Result<DynBox<Series>, String>> {"},
{"lineNum":"  225","line":"    let name: String = name.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    dyn_box_result!(cr, |data_frame| data_frame.column(&name).cloned())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  228","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  231","line":"fn rust_data_frame_columns("},
{"lineNum":"  232","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  233","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":"    names: OCamlRef<OCamlList<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":") -> OCaml<Result<OCamlList<DynBox<Series>>, String>> {"},
{"lineNum":"  236","line":"    let Abstract(data_frame) = data_frame.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  237","line":"    let names: Vec<String> = names.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  238","line":"    data_frame","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  239","line":"        .columns(&names)"},
{"lineNum":"  240","line":"        .map(|series| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  241","line":"            series","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":"                .into_iter()"},
{"lineNum":"  243","line":"                .map(|series| Abstract(series.clone()))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  244","line":"                .collect::<Vec<Abstract<_>>>()"},
{"lineNum":"  245","line":"        })","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  246","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  247","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  248","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  251","line":"fn rust_data_frame_get_column_names("},
{"lineNum":"  252","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  253","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  254","line":") -> OCaml<OCamlList<String>> {"},
{"lineNum":"  255","line":"    let Abstract(data_frame) = data_frame.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":"    data_frame.get_column_names().to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  257","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  260","line":"fn rust_data_frame_vertical_concat("},
{"lineNum":"  261","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  262","line":"    data_frames: OCamlRef<OCamlList<DynBox<DataFrame>>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  263","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  264","line":"    let data_frames = unwrap_abstract_vec(data_frames.to_rust(cr));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"    let stack = || {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  267","line":"        let mut data_frames = data_frames.into_iter();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"        let mut result = data_frames.next().ok_or(PolarsError::NoData(","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  269","line":"            \"No dataframes provided for vertical concatenation\".into(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":"        ))?;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  271","line":"        for data_frame in data_frames {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  272","line":"            result = result.vstack(&data_frame)?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  273","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  274","line":"        Ok(result)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  275","line":"    };","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"    stack()","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  278","line":"        .map(Abstract)"},
{"lineNum":"  279","line":"        .map_err(|err: PolarsError| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  280","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  281","line":"}"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  284","line":"fn rust_data_frame_horizontal_concat("},
{"lineNum":"  285","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  286","line":"    data_frames: OCamlRef<OCamlList<DynBox<DataFrame>>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  288","line":"    let data_frames = unwrap_abstract_vec(data_frames.to_rust(cr));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"    polars::functions::hor_concat_df(&data_frames)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  291","line":"        .map(Abstract)"},
{"lineNum":"  292","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  293","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  294","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  297","line":"fn rust_data_frame_diagonal_concat("},
{"lineNum":"  298","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  299","line":"    data_frames: OCamlRef<OCamlList<DynBox<DataFrame>>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  300","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  301","line":"    let data_frames = unwrap_abstract_vec(data_frames.to_rust(cr));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    polars::functions::diag_concat_df(&data_frames)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  304","line":"        .map(Abstract)"},
{"lineNum":"  305","line":"        .map_err(|err| err.to_string())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  306","line":"        .to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  307","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  310","line":"fn rust_data_frame_pivot("},
{"lineNum":"  311","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  312","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":"    values: OCamlRef<OCamlList<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  314","line":"    index: OCamlRef<OCamlList<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  315","line":"    columns: OCamlRef<OCamlList<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  316","line":"    sort_columns: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  317","line":"    agg_expr: OCamlRef<Option<DynBox<Expr>>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  318","line":"    separator: OCamlRef<Option<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  319","line":"    stable: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  320","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  321","line":"    let values: Vec<String> = values.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  322","line":"    let index: Vec<String> = index.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  323","line":"    let columns: Vec<String> = columns.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"    let sort_columns: bool = sort_columns.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  325","line":"    let agg_expr: Option<Expr> = agg_expr","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":"        .to_rust::<Option<Abstract<Expr>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  327","line":"        .map(|Abstract(expr)| expr);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  328","line":"    let separator: Option<String> = separator.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"    let stable: bool = stable.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"    dyn_box_result!(cr, |data_frame| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  333","line":"        if stable {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  334","line":"            pivot::pivot_stable(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":"                &data_frame,"},
{"lineNum":"  336","line":"                &values,"},
{"lineNum":"  337","line":"                &index,"},
{"lineNum":"  338","line":"                &columns,"},
{"lineNum":"  339","line":"                sort_columns,"},
{"lineNum":"  340","line":"                agg_expr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  341","line":"                separator.as_deref(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  342","line":"            )","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  343","line":"        } else {"},
{"lineNum":"  344","line":"            pivot::pivot(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  345","line":"                &data_frame,"},
{"lineNum":"  346","line":"                &values,"},
{"lineNum":"  347","line":"                &index,"},
{"lineNum":"  348","line":"                &columns,"},
{"lineNum":"  349","line":"                sort_columns,"},
{"lineNum":"  350","line":"                agg_expr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  351","line":"                separator.as_deref(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  352","line":"            )","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  353","line":"        }"},
{"lineNum":"  354","line":"    })"},
{"lineNum":"  355","line":"}","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  358","line":"fn rust_data_frame_melt("},
{"lineNum":"  359","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  360","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  361","line":"    id_vars: OCamlRef<OCamlList<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  362","line":"    value_vars: OCamlRef<OCamlList<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  363","line":"    variable_name: OCamlRef<Option<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  364","line":"    value_name: OCamlRef<Option<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  365","line":"    streamable: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  366","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  367","line":"    let id_vars: Vec<SmartString<LazyCompact>> = id_vars","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  368","line":"        .to_rust::<Vec<String>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  369","line":"        .into_iter()"},
{"lineNum":"  370","line":"        .map(|s| s.into())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  371","line":"        .collect();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  372","line":"    let value_vars: Vec<SmartString<LazyCompact>> = value_vars","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  373","line":"        .to_rust::<Vec<String>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  374","line":"        .into_iter()"},
{"lineNum":"  375","line":"        .map(|s| s.into())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  376","line":"        .collect();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  377","line":"    let variable_name: Option<SmartString<LazyCompact>> = variable_name","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  378","line":"        .to_rust::<Option<String>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  379","line":"        .map(|s| s.into());","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  380","line":"    let value_name: Option<SmartString<LazyCompact>> ="},
{"lineNum":"  381","line":"        value_name.to_rust::<Option<String>>(cr).map(|s| s.into());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  382","line":"    let streamable: bool = streamable.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"    let melt_args = MeltArgs {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  385","line":"        id_vars,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  386","line":"        value_vars,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  387","line":"        variable_name,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  388","line":"        value_name,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  389","line":"        streamable,"},
{"lineNum":"  390","line":"    };"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"    dyn_box_result!(cr, |data_frame| data_frame.melt2(melt_args))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  393","line":"}","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"  396","line":"fn rust_data_frame_sort("},
{"lineNum":"  397","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  398","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  399","line":"    by_column: OCamlRef<OCamlList<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  400","line":"    descending: OCamlRef<OCamlList<bool>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  401","line":"    maintain_order: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  402","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  403","line":"    let by_column: Vec<String> = by_column.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  404","line":"    let descending: Vec<bool> = descending.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  405","line":"    let maintain_order: bool = maintain_order.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"    dyn_box_result!(cr, |data_frame| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  408","line":"        data_frame.sort(by_column, descending, maintain_order)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  409","line":"    })"},
{"lineNum":"  410","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  413","line":"fn rust_data_frame_head("},
{"lineNum":"  414","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  415","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  416","line":"    length: OCamlRef<Option<OCamlInt>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  417","line":") -> OCaml<DynBox<DataFrame>> {"},
{"lineNum":"  418","line":"    let length = length","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  419","line":"        .to_rust::<Coerce<_, Option<i64>, Option<usize>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  420","line":"        .get()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    dyn_box!(cr, |data_frame| data_frame.head(length))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  423","line":"}"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  426","line":"fn rust_data_frame_tail("},
{"lineNum":"  427","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  428","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  429","line":"    length: OCamlRef<Option<OCamlInt>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  430","line":") -> OCaml<DynBox<DataFrame>> {"},
{"lineNum":"  431","line":"    let length = length","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  432","line":"        .to_rust::<Coerce<_, Option<i64>, Option<usize>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  433","line":"        .get()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"    dyn_box!(cr, |data_frame| data_frame.tail(length))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  436","line":"}"},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"#[ocaml_interop_export(raise_on_err)]","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  439","line":"fn rust_data_frame_sample_n("},
{"lineNum":"  440","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  441","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  442","line":"    n: OCamlRef<OCamlInt>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  443","line":"    with_replacement: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  444","line":"    shuffle: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  445","line":"    seed: OCamlRef<Option<OCamlInt>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  446","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  447","line":"    let n = n.to_rust::<Coerce<_, i64, usize>>(cr).get()?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  448","line":"    let with_replacement: bool = with_replacement.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  449","line":"    let shuffle: bool = shuffle.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  450","line":"    let seed: Option<u64> = seed","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  451","line":"        .to_rust::<Coerce<_, Option<i64>, Option<u64>>>(cr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  452","line":"        .get()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"    dyn_box_result!(cr, |data_frame| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  455","line":"        data_frame.sample_n(n, with_replacement, shuffle, seed)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  456","line":"    })"},
{"lineNum":"  457","line":"}"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"dyn_box_op!(rust_data_frame_sum, DataFrame, |data_frame| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  460","line":"    data_frame.sum()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  461","line":"});"},
{"lineNum":"  462","line":"dyn_box_op!(rust_data_frame_mean, DataFrame, |data_frame| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  463","line":"    data_frame.mean()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  464","line":"});"},
{"lineNum":"  465","line":"dyn_box_op!(rust_data_frame_median, DataFrame, |data_frame| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  466","line":"    data_frame.median()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  467","line":"});"},
{"lineNum":"  468","line":"// TODO: mode is missing for dataframes"},
{"lineNum":"  469","line":"dyn_box_op!(rust_data_frame_null_count, DataFrame, |data_frame| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  470","line":"    data_frame.null_count()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  471","line":"});"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  474","line":"fn rust_data_frame_fill_null_with_strategy("},
{"lineNum":"  475","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  476","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  477","line":"    strategy: OCamlRef<FillNullStrategy>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  478","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  479","line":"    let PolarsFillNullStrategy(strategy) = strategy.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"    dyn_box_result!(cr, |data_frame| data_frame.fill_null(strategy))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  482","line":"}"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  485","line":"fn rust_data_frame_interpolate("},
{"lineNum":"  486","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  487","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  488","line":"    method: OCamlRef<InterpolationMethod>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  489","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  490","line":"    let PolarsInterpolationMethod(method) = method.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"    dyn_box_result!(cr, |data_frame| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  493","line":"        let series = data_frame","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  494","line":"            .get_columns()"},
{"lineNum":"  495","line":"            .iter()"},
{"lineNum":"  496","line":"            .map(|series| interpolate(series, method))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  497","line":"            .collect::<Vec<_>>();"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"        DataFrame::new(series)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  500","line":"    })"},
{"lineNum":"  501","line":"}"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  504","line":"fn rust_data_frame_upsample("},
{"lineNum":"  505","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  506","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  507","line":"    by: OCamlRef<OCamlList<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  508","line":"    time_column: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  509","line":"    every: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  510","line":"    offset: OCamlRef<String>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  511","line":"    stable: OCamlRef<bool>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  512","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  513","line":"    let by: Vec<String> = by.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  514","line":"    let time_column: String = time_column.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  515","line":"    let every: String = every.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  516","line":"    let offset: String = offset.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  517","line":"    let stable: bool = stable.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"    dyn_box_result!(cr, |data_frame| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  520","line":"        if stable {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  521","line":"            data_frame.upsample_stable(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  522","line":"                &by,"},
{"lineNum":"  523","line":"                &time_column,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  524","line":"                Duration::parse(&every),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  525","line":"                Duration::parse(&offset),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  526","line":"            )"},
{"lineNum":"  527","line":"        } else {"},
{"lineNum":"  528","line":"            data_frame.upsample(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  529","line":"                &by,"},
{"lineNum":"  530","line":"                &time_column,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  531","line":"                Duration::parse(&every),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  532","line":"                Duration::parse(&offset),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  533","line":"            )"},
{"lineNum":"  534","line":"        }"},
{"lineNum":"  535","line":"    })"},
{"lineNum":"  536","line":"}","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  539","line":"fn rust_data_frame_explode("},
{"lineNum":"  540","line":"    cr: &mut &mut OCamlRuntime,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  541","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  542","line":"    columns: OCamlRef<OCamlList<String>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  543","line":") -> OCaml<Result<DynBox<DataFrame>, String>> {"},
{"lineNum":"  544","line":"    let columns: Vec<String> = columns.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"    dyn_box_result!(cr, |data_frame| data_frame.explode(columns))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  547","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  550","line":"fn rust_data_frame_schema("},
{"lineNum":"  551","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  552","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  553","line":") -> OCaml<DynBox<Schema>> {"},
{"lineNum":"  554","line":"    dyn_box!(cr, |data_frame| data_frame.schema())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  555","line":"}"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"#[ocaml_interop_export]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  558","line":"fn rust_data_frame_to_string_hum("},
{"lineNum":"  559","line":"    cr: &mut &mut OCamlRuntime,"},
{"lineNum":"  560","line":"    data_frame: OCamlRef<DynBox<DataFrame>>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  561","line":") -> OCaml<String> {"},
{"lineNum":"  562","line":"    let Abstract(data_frame) = data_frame.to_rust(cr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  563","line":"    data_frame.to_string().to_ocaml(cr)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  564","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "inline_test_runner_polars.exe", "date" : "2023-09-17 15:58:42", "instrumented" : 347, "covered" : 0,};
var merged_data = [];
