var data = {lines:[
{"lineNum":"    1","line":"mod data_frame;","class":"lineNoCov","hits":"0","possible_hits":"547",},
{"lineNum":"    2","line":"mod expr;"},
{"lineNum":"    3","line":"mod lazy_frame;"},
{"lineNum":"    4","line":"mod misc;"},
{"lineNum":"    5","line":"mod series;"},
{"lineNum":"    6","line":"mod sql_context;"},
{"lineNum":"    7","line":"mod utils;"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"#[cfg(test)]"},
{"lineNum":"   10","line":"mod tests {"},
{"lineNum":"   11","line":"    use expect_test::{expect, Expect};"},
{"lineNum":"   12","line":"    use polars::prelude::*;"},
{"lineNum":"   13","line":"    use std::fmt::Debug;"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"    fn check<T: Debug>(actual: T, expect: Expect) {"},
{"lineNum":"   16","line":"        let actual = format!(\"{:?}\", actual);"},
{"lineNum":"   17","line":"        expect.assert_eq(&actual);"},
{"lineNum":"   18","line":"    }"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"    #[test]"},
{"lineNum":"   21","line":"    fn check_div() {"},
{"lineNum":"   22","line":"        std::env::set_var(\"POLARS_TABLE_WIDTH\", \"100\");"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"        let weather_by_day = DataFrame::new(vec!["},
{"lineNum":"   25","line":"            Series::new("},
{"lineNum":"   26","line":"                \"station\","},
{"lineNum":"   27","line":"                (1..11)"},
{"lineNum":"   28","line":"                    .map(|i| format!(\"Station_{}\", i))"},
{"lineNum":"   29","line":"                    .collect::<Vec<_>>(),"},
{"lineNum":"   30","line":"            ),"},
{"lineNum":"   31","line":"            Series::new(\"day_1\", [17, 11, 8, 22, 9, 21, 20, 8, 8, 17]),"},
{"lineNum":"   32","line":"            Series::new(\"day_2\", [15, 11, 10, 8, 7, 14, 18, 21, 15, 13]),"},
{"lineNum":"   33","line":"            Series::new(\"day_3\", [16, 15, 24, 24, 8, 23, 19, 23, 16, 10]),"},
{"lineNum":"   34","line":"        ])"},
{"lineNum":"   35","line":"        .unwrap();"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"        check("},
{"lineNum":"   38","line":"            weather_by_day.clone(),"},
{"lineNum":"   39","line":"            expect![[r#\""},
{"lineNum":"   40","line":"                shape: (10, 4)"},
{"lineNum":"   41","line":"                ┌────────────┬───────┬───────┬───────┐"},
{"lineNum":"   42","line":"                │ station    ┆ day_1 ┆ day_2 ┆ day_3 │"},
{"lineNum":"   43","line":"                │ ---        ┆ ---   ┆ ---   ┆ ---   │"},
{"lineNum":"   44","line":"                │ str        ┆ i32   ┆ i32   ┆ i32   │"},
{"lineNum":"   45","line":"                ╞════════════╪═══════╪═══════╪═══════╡"},
{"lineNum":"   46","line":"                │ Station_1  ┆ 17    ┆ 15    ┆ 16    │"},
{"lineNum":"   47","line":"                │ Station_2  ┆ 11    ┆ 11    ┆ 15    │"},
{"lineNum":"   48","line":"                │ Station_3  ┆ 8     ┆ 10    ┆ 24    │"},
{"lineNum":"   49","line":"                │ Station_4  ┆ 22    ┆ 8     ┆ 24    │"},
{"lineNum":"   50","line":"                │ …          ┆ …     ┆ …     ┆ …     │"},
{"lineNum":"   51","line":"                │ Station_7  ┆ 20    ┆ 18    ┆ 19    │"},
{"lineNum":"   52","line":"                │ Station_8  ┆ 8     ┆ 21    ┆ 23    │"},
{"lineNum":"   53","line":"                │ Station_9  ┆ 8     ┆ 15    ┆ 16    │"},
{"lineNum":"   54","line":"                │ Station_10 ┆ 17    ┆ 13    ┆ 10    │"},
{"lineNum":"   55","line":"                └────────────┴───────┴───────┴───────┘\"#]],"},
{"lineNum":"   56","line":"        );"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"        // Interestingly, the Rust div function is translated into"},
{"lineNum":"   59","line":"        // Operator::Divide (which doesn\'t convert output to float) while"},
{"lineNum":"   60","line":"        // __div__ in Python gets translated into Operator::TrueDivide"},
{"lineNum":"   61","line":"        // (which converts output to float)"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"        // let rank_pct = (col(\"\")"},
{"lineNum":"   64","line":"        //     .rank("},
{"lineNum":"   65","line":"        //         RankOptions {"},
{"lineNum":"   66","line":"        //             descending: true,"},
{"lineNum":"   67","line":"        //             ..Default::default()"},
{"lineNum":"   68","line":"        //         },"},
{"lineNum":"   69","line":"        //         None,"},
{"lineNum":"   70","line":"        //     )"},
{"lineNum":"   71","line":"        //     .cast(DataType::Float64)"},
{"lineNum":"   72","line":"        //     / col(\"*\").count())"},
{"lineNum":"   73","line":"        // .round(2);"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        let rank_pct = (Expr::BinaryExpr {"},
{"lineNum":"   76","line":"            left: Box::new(col(\"\").rank("},
{"lineNum":"   77","line":"                RankOptions {"},
{"lineNum":"   78","line":"                    descending: true,"},
{"lineNum":"   79","line":"                    ..Default::default()"},
{"lineNum":"   80","line":"                },"},
{"lineNum":"   81","line":"                None,"},
{"lineNum":"   82","line":"            )),"},
{"lineNum":"   83","line":"            op: Operator::TrueDivide,"},
{"lineNum":"   84","line":"            right: Box::new(col(\"*\").count()),"},
{"lineNum":"   85","line":"        })"},
{"lineNum":"   86","line":"        .round(2);"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"        let out = weather_by_day"},
{"lineNum":"   89","line":"            .lazy()"},
{"lineNum":"   90","line":"            .with_column("},
{"lineNum":"   91","line":"                concat_list([all().exclude([\"station\"])])"},
{"lineNum":"   92","line":"                    .unwrap()"},
{"lineNum":"   93","line":"                    .alias(\"all_temps\"),"},
{"lineNum":"   94","line":"            )"},
{"lineNum":"   95","line":"            .collect()"},
{"lineNum":"   96","line":"            .unwrap()"},
{"lineNum":"   97","line":"            .lazy()"},
{"lineNum":"   98","line":"            .select(["},
{"lineNum":"   99","line":"                all().exclude([\"all_temps\"]),"},
{"lineNum":"  100","line":"                col(\"all_temps\")"},
{"lineNum":"  101","line":"                    .list()"},
{"lineNum":"  102","line":"                    .eval(rank_pct, false)"},
{"lineNum":"  103","line":"                    .alias(\"temps_rank\"),"},
{"lineNum":"  104","line":"            ])"},
{"lineNum":"  105","line":"            .collect()"},
{"lineNum":"  106","line":"            .unwrap();"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"        check("},
{"lineNum":"  109","line":"            out,"},
{"lineNum":"  110","line":"            expect![[r#\""},
{"lineNum":"  111","line":"                shape: (10, 5)"},
{"lineNum":"  112","line":"                ┌────────────┬───────┬───────┬───────┬────────────────────┐"},
{"lineNum":"  113","line":"                │ station    ┆ day_1 ┆ day_2 ┆ day_3 ┆ temps_rank         │"},
{"lineNum":"  114","line":"                │ ---        ┆ ---   ┆ ---   ┆ ---   ┆ ---                │"},
{"lineNum":"  115","line":"                │ str        ┆ i32   ┆ i32   ┆ i32   ┆ list[f64]          │"},
{"lineNum":"  116","line":"                ╞════════════╪═══════╪═══════╪═══════╪════════════════════╡"},
{"lineNum":"  117","line":"                │ Station_1  ┆ 17    ┆ 15    ┆ 16    ┆ [0.33, 1.0, 0.67]  │"},
{"lineNum":"  118","line":"                │ Station_2  ┆ 11    ┆ 11    ┆ 15    ┆ [0.67, 0.67, 0.33] │"},
{"lineNum":"  119","line":"                │ Station_3  ┆ 8     ┆ 10    ┆ 24    ┆ [1.0, 0.67, 0.33]  │"},
{"lineNum":"  120","line":"                │ Station_4  ┆ 22    ┆ 8     ┆ 24    ┆ [0.67, 1.0, 0.33]  │"},
{"lineNum":"  121","line":"                │ …          ┆ …     ┆ …     ┆ …     ┆ …                  │"},
{"lineNum":"  122","line":"                │ Station_7  ┆ 20    ┆ 18    ┆ 19    ┆ [0.33, 1.0, 0.67]  │"},
{"lineNum":"  123","line":"                │ Station_8  ┆ 8     ┆ 21    ┆ 23    ┆ [1.0, 0.67, 0.33]  │"},
{"lineNum":"  124","line":"                │ Station_9  ┆ 8     ┆ 15    ┆ 16    ┆ [1.0, 0.67, 0.33]  │"},
{"lineNum":"  125","line":"                │ Station_10 ┆ 17    ┆ 13    ┆ 10    ┆ [0.33, 0.67, 1.0]  │"},
{"lineNum":"  126","line":"                └────────────┴───────┴───────┴───────┴────────────────────┘\"#]],"},
{"lineNum":"  127","line":"        );"},
{"lineNum":"  128","line":"    }"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    // I don\'t really understand what\'s going on here, but below tests correctly"},
{"lineNum":"  131","line":"    // demonstrates a panic when running on a box on EC2[1] but not on my development machine at home[2]"},
{"lineNum":"  132","line":"    //"},
{"lineNum":"  133","line":"    // [1]:"},
{"lineNum":"  134","line":"    // $ cat /proc/cpuinfo | grep \'model name\' | uniq"},
{"lineNum":"  135","line":"    // model name      : AMD EPYC 7571"},
{"lineNum":"  136","line":"    //"},
{"lineNum":"  137","line":"    // [2]:"},
{"lineNum":"  138","line":"    // $ cat /proc/cpuinfo | grep \'model name\' | uniq"},
{"lineNum":"  139","line":"    // model name      : 13th Gen Intel(R) Core(TM) i9-13900K"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    // https://github.com/pola-rs/polars/issues/9916"},
{"lineNum":"  142","line":"    // #[test]"},
{"lineNum":"  143","line":"    // #[should_panic]"},
{"lineNum":"  144","line":"    // fn lazy_sort_instability() {"},
{"lineNum":"  145","line":"    //     let dataset = CsvReader::from_path(\"../test/data/legislators-historical.csv\")"},
{"lineNum":"  146","line":"    //         .unwrap()"},
{"lineNum":"  147","line":"    //         .finish()"},
{"lineNum":"  148","line":"    //         .unwrap();"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"    //     let mut prev: Option<DataFrame> = None;"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    //     for _ in 0..10000 {"},
{"lineNum":"  153","line":"    //         let df = dataset"},
{"lineNum":"  154","line":"    //             .clone()"},
{"lineNum":"  155","line":"    //             .lazy()"},
{"lineNum":"  156","line":"    //             .groupby_stable(vec![col(\"state\")])"},
{"lineNum":"  157","line":"    //             .agg(vec!["},
{"lineNum":"  158","line":"    //                 (col(\"party\").eq(lit(\"Anti-Administration\")))"},
{"lineNum":"  159","line":"    //                     .mean()"},
{"lineNum":"  160","line":"    //                     .alias(\"anti\"),"},
{"lineNum":"  161","line":"    //                 (col(\"party\").eq(lit(\"Pro-Administration\")))"},
{"lineNum":"  162","line":"    //                     .mean()"},
{"lineNum":"  163","line":"    //                     .alias(\"pro\"),"},
{"lineNum":"  164","line":"    //             ])"},
{"lineNum":"  165","line":"    //             .sort("},
{"lineNum":"  166","line":"    //                 \"pro\","},
{"lineNum":"  167","line":"    //                 SortOptions {"},
{"lineNum":"  168","line":"    //                     multithreaded: false,"},
{"lineNum":"  169","line":"    //                     maintain_order: true,"},
{"lineNum":"  170","line":"    //                     ..Default::default()"},
{"lineNum":"  171","line":"    //                 },"},
{"lineNum":"  172","line":"    //             )"},
{"lineNum":"  173","line":"    //             .limit(5)"},
{"lineNum":"  174","line":"    //             .collect()"},
{"lineNum":"  175","line":"    //             .unwrap();"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"    //         if let Some(prev) = prev {"},
{"lineNum":"  178","line":"    //             assert_eq!(df, prev);"},
{"lineNum":"  179","line":"    //         }"},
{"lineNum":"  180","line":"    //         prev = Some(df);"},
{"lineNum":"  181","line":"    //     }"},
{"lineNum":"  182","line":"    // }"},
{"lineNum":"  183","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "inline_test_runner_polars_async.exe", "date" : "2023-09-17 15:58:19", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
